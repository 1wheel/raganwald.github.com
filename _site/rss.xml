<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>raganwald.com</title>
    <link>http://raganwald.com/</link>
    <atom:link href="http://raganwald.com/rss.xml" rel="self" type="application/rss+xml" />
    <description>Your Website</description>
    <language>en-us</language>
    <pubDate>Tue, 26 Mar 2013 12:00:11 -0400</pubDate>
    <lastBuildDate>Tue, 26 Mar 2013 12:00:11 -0400</lastBuildDate>

    
      
        <item>
          <title>Zee Hackenbush Bird</title>
          <link>http://raganwald.com/enchanted-forest/hackenbush.html</link>
          <pubDate>Sun, 24 Mar 2013 00:00:00 -0400</pubDate>
          <author>reg@braythwayt.com (Reginald Braithwaite)</author>
          <guid>http://raganwald.com/enchanted-forest/zee-hackenbush-bird.coffee</guid>
          <description>&lt;p&gt;Previous: &lt;a href=&quot;./horton.html&quot;&gt;A Surreal Encounter With a Winged Elephant&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WARNING: THIS ESSAY IS A WORK IN PROGRESS&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Moses led Maude to a sandy riverbank, where a number of birds had congregated. Maude watched for a few moments, and she saw that all along the riverbank, birds were arrayed, each with a small territory. Each bird had collected river pebbles of various colours and had them arranged in rows or pits.&lt;/p&gt;

&lt;p&gt;Other birds would flutter along from one territory to another, examining the arrangements of stones. They would sometimes engage each other in conversation, and in some places they would rearrange the stones in concert with the bird stationed there in some kind of elaborate ritual.&lt;/p&gt;

&lt;h3 id=&quot;the-bowers&quot;&gt;the bowers&lt;/h3&gt;

&lt;p&gt;“Each of these birds,” explained Moses, “Makes a bower out of pebbles. Prospective mates inspect the bowers looking for signs of intelligence. A few bowerbirds find it sufficient to make elaborate patterns of pebbles and sand, the Mandelbrot Bird&lt;sup id=&quot;fnref:Mandelbrot&quot;&gt;&lt;a href=&quot;#fn:Mandelbrot&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; is a spectacular example of this type. But on this riverbank, the birds specialize in patterns of pebbles that can be rearranged in specific patterns.&lt;/p&gt;

&lt;p&gt;“To fully appreciate the bower’s ingenious owner, the inspecting bird will interact withe the stones. If they are intrigued or excited by what they discover, they favour the owner with their, um, admiration.”&lt;/p&gt;

&lt;p&gt;Maude was intrigued by the birds and had a look at a few that were close by. Each bird had laid out several rows of pits in the sand, and most of the pits contained pebbles. The birds were taking turns scooping pebbles out of pits and distributing them to other pits. “What is going on with these?” she asked.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/laempel/5969810490/&quot; title=&quot;Sanfrauen beim Mancala by leo.laempel, on Flickr&quot;&gt;&lt;img src=&quot;http://farm7.staticflickr.com/6149/5969810490_cb25e6f6fa_z.jpg&quot; width=&quot;480&quot; height=&quot;640&quot; alt=&quot;Sanfrauen beim Mancala&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“Ah,” said Moses. “These are bowerbirds from the Mancala or Warri famly. As you can see, their bowers consist of rows of pits.”&lt;/p&gt;

&lt;h3 id=&quot;game-birds&quot;&gt;game birds&lt;/h3&gt;

&lt;p&gt;“An essential part of their ritual bower behaviour is that each bird chooses a pit, picks up the pebbles it it, and then distributes them to other pits is a proscribed fashion, typically one at a time, clockwise. The birds alternate distributing stones in this fashion.”&lt;/p&gt;

&lt;p&gt;“At some point, the ritual reaches an end and the birds evaluate the result, declaring either the host or visiting bird the &lt;em&gt;winner&lt;/em&gt;. The important thing to note about these games is that the host bird devises a series of rules proscribing the allowed actions, the birds alternate actions, and that every ritual ends with one or the other winning. No randomness or hidden information is involved.”&lt;/p&gt;

&lt;p&gt;“Hmm,” said Maude, “it sounds like you’re describing &lt;em&gt;games&lt;/em&gt;. We play games in my village.”&lt;/p&gt;

&lt;p&gt;“Yes,” said Moses, “These are games, although ‘game’ is a word used very broadly to describe everything from fighting over a twig to use for nesting to highly formal rituals like these.”&lt;/p&gt;

&lt;p&gt;“Mancala Birds are what we call &lt;em&gt;game birds&lt;/em&gt;, but they aren’t the only ones. See these other birds over there? They play their games by moving and removing coloured pebbles from grids. One of them, the Sensei Bird, has an amazing bower featuring a 19 by 19 lattice and some kind of nesting territory game.”&lt;/p&gt;

&lt;p&gt;Maude considered. “You said that I’d learn something about the significance of Horton’s proper flocks here. It sounds like I’m going to learn about his work with pebbles on grids of cells.”&lt;/p&gt;

&lt;p&gt;Moses cawed loudly. “No, no, despite the resemblance, Horton’s work with grids is not a game in this sense at all. Let us walk a little further down the beach to talk to my friend Zee Hackenbush Bird. He is one of the oldest and most respected of the game birds.”&lt;/p&gt;

&lt;p&gt;“In fact, his bower is so advanced that it is no longer a game. He has a bower that models other games, and his interest is in analyzing games rather than playing them.”&lt;/p&gt;

&lt;p&gt;Moses led Maude down the riverbank to a shaded area where a single bird was stepping back and forth between twelve or thirteen bowers arranged in a semicircle. At each bower, a cluster of young birds were chattering and discussing what was laid out before them.&lt;/p&gt;

&lt;p&gt;“That,” whispered Moses reverentially, “is Zee Hackenbush Bird.”&lt;/p&gt;

&lt;h3 id=&quot;zee-hackenbush-bird&quot;&gt;zee hackenbush bird&lt;/h3&gt;

&lt;p&gt;What Maude saw was an awkward bird with broad, black tail and breast feathers that looked a little like an old-fashioned man’s frock coat. Its head was balding and a bushy fringe of feathers adorned the top of its beak. One long, brown, stiff wattle protruded like a cigar protrudes from a smoker’s mouth. Its gait was low and long, as if it stooped rather than stepped.&lt;/p&gt;

&lt;p&gt;Moses drew Maude forward and introduced her to him. Surprisingly, Zee Hackenbush Bird was friendly and given to joking. “Call me Hugo,” he said, and batted his eyes at her rogueishly. She found him funny and charming.&lt;/p&gt;

&lt;p&gt;“Hugo,” she asked, “Moses tells me that you can explain the significance of Horton’s flocks. They seem like an idle circus distraction, a complicated way to do things that are otherwise very simple, like arithmetic.”&lt;/p&gt;

&lt;p&gt;Zee Hackenbush Bird waggled his eyebrows. “Of course,” he said, “Horton and I work on the exact same underlying principles, but he has a way of describing the implications that is novel, but unpersuasive.”&lt;/p&gt;

&lt;p&gt;“I find that the important thing is to focus on what new ideas a discovery makes easy, rather than what old ideas a discovery replicates. You said you are familiar with Horton’s flocking birds?”&lt;/p&gt;

&lt;p&gt;Maude nodded, and Zee Hackenbush bird led them over to one of his bowers.&lt;/p&gt;

&lt;p&gt;“This,” and here he waved his wing over several rows of black and white pebbles, “Is a game I have modestly named &lt;em&gt;Hackenstrings&lt;/em&gt;. It is a good introduction for someone as intelligent and curious as you are.”&lt;/p&gt;

&lt;p&gt;Zee Hackenbush Bird opened his beak and delivered what must have been a very familiar lecture, for he sang it in a squeaky voice while strutting and dancing back and forth.&lt;sup id=&quot;fnref:walker&quot;&gt;&lt;a href=&quot;#fn:walker&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;hackenstrings&quot;&gt;Hackenstrings&lt;/h2&gt;

&lt;p&gt;Hackenstrings is a simple game. We take as the “board” one or more rows of pebbles, and each pebble is either black or white. We have two players, one of whom is designated as Black, the other as White.&lt;/p&gt;

&lt;p&gt;These two colours are arbitrary, and we could just as easily use any two ways of designating pebbles and players, provided we can always identify which pebbles “belong” to which player.&lt;/p&gt;

&lt;p&gt;We always assume that White plays first, but this is not material.&lt;/p&gt;

&lt;p&gt;A “move” consists of choosing any stone of the player’s colour, and removing that stone along with all others to its right in the same row regardless of colour. For example, given:&lt;/p&gt;

&lt;p&gt;→●●●●&lt;br /&gt;
→○○○  &lt;/p&gt;

&lt;p&gt;If it was White’s turn, White could choose to remove the third white stone on the fourth row, which also removes the fourth, producing:&lt;/p&gt;

&lt;p&gt;→●●&lt;br /&gt;
→○○○  &lt;/p&gt;

&lt;p&gt;Black would then be able to select any of the three stones on the second row. The game ends when one player has no legal move on their turn. That player loses.&lt;/p&gt;

&lt;p&gt;This very simple game is subject to easy analysis. You can probably work it out intuitively: White can always win simply by taking a single stone from the right of the first row. We can make it slightly more complex:&lt;/p&gt;

&lt;p&gt;→●&lt;br /&gt;
→○○○&lt;br /&gt;
→●●●  &lt;/p&gt;

&lt;p&gt;Or even:&lt;/p&gt;

&lt;p&gt;→●●●●&lt;br /&gt;
→○○○&lt;br /&gt;
→○○&lt;br /&gt;
→●●●  &lt;/p&gt;

&lt;p&gt;White still has a winning strategy: Take a single stone from the right of any row.&lt;/p&gt;

&lt;p&gt;Provided the game consists of one or more rows, where each row consist only of pebbles of the same colour, if one player has more pebbles than the other, that player always has a winning strategy.&lt;/p&gt;

&lt;h3 id=&quot;evaluating-a-game&quot;&gt;evaluating a game&lt;/h3&gt;

&lt;p&gt;This business of “having a winning strategy” is important, so much so that we’ll formalize it. Every game can be given a &lt;em&gt;value&lt;/em&gt;. We’ll formalize the value by assigning it a number. What number? Let’s start with the simplest possible game:&lt;/p&gt;

&lt;p&gt;This is the game where there are no pebbles. If White plays first, White loses with best play. We give this game a zero. We can add pebbles to the game and end up with the same outcome: White loses if White plays first. As long as we add an equal number of white and black pebbles, and as long as each row only contains pebbles of one colour, if there are an equal number of pebbles, the game evaluates to zero.&lt;/p&gt;

&lt;p&gt;What happens if one player has more pebbles than the other? Let’s consider the case where White has one pebble and Black has none:&lt;/p&gt;

&lt;p&gt;→●&lt;/p&gt;

&lt;p&gt;If it’s White’s turn to play, White takes the pebble and the game becomes transformed into the game above where it is Black’s turn to play. We know this to be a win for White. If it’s Black’s turn to play, Black loses immediately.&lt;/p&gt;

&lt;p&gt;So adding one pebble for White turns this from a game where White loses if it’s White’s turn to play into a game where White always wins. This is better than zero, so let’s call this game one. If we add another pebble for White, we can call it two, another white pebble makes it three, and so on.&lt;/p&gt;

&lt;p&gt;What if we add pebbles for Black? This game:&lt;/p&gt;

&lt;p&gt;→○&lt;/p&gt;

&lt;p&gt;Is a win for Black whether it is White’s turn to play or not. That’s worse than zero, so we call it negative one. Additional stones for Black make it negative two, negative three, and so on.&lt;/p&gt;

&lt;p&gt;Now if we add stones for both White and Black but refrain from mixing stones of two different colours on the same line, we end up with games like this:&lt;/p&gt;

&lt;p&gt;→●&lt;br /&gt;
→○○○&lt;br /&gt;
→●●●  &lt;/p&gt;

&lt;p&gt;Intuitively, the best strategy for each player is to remove a single stone on their turn. Since they alternate taking stones, you can reduce any such game by removing an equal number of stones of each colour, leaving zero or more stones of a single colour.&lt;/p&gt;

&lt;p&gt;Or more succinctly, every game of this type can be evaluated by counting +1 for each white stone and -1 for each black stone.&lt;/p&gt;

&lt;h3 id=&quot;maudes-simple-evaluator&quot;&gt;maude’s simple evaluator&lt;/h3&gt;

&lt;p&gt;Maude started with the following notes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{isArray, every, reduce, isEmpty} = require 'underscore'

white = {}
black = {}

class HackenstringGame
  invert = (colour) -&amp;gt;
    if colour is white
      black
    else if colour is black
      white
  stoneValue = (colour) -&amp;gt;
    if colour is white
      1
    else if colour is black
      -1
  validRow = (row) -&amp;gt;
    isArray(row) and every(row, (stone) -&amp;gt; stone is white or stone is black)
  constructor: (@rows) -&amp;gt;
    throw 'invalid' unless isArray(@rows) and every(@rows, validRow)
  evaluation: -&amp;gt;
    reduce @rows,
      (acc, row) -&amp;gt;
          startColour = row[0]
          firstOther = row.indexOf(invert(startColour))
          if row.length is 0
            acc
          else if firstOther &amp;lt; 1
            row.length * stoneValue(startColour) + acc
          else
            throw &quot;TODO: Implement Me&quot;
      , 0

describe &quot;HackenstringGame&quot;, -&amp;gt;

  noRows = new HackenstringGame([])
  oneEmptyRow = new HackenstringGame([[]])
  twoEmptyRows = new HackenstringGame([[]])

  describe &quot;construction&quot;, -&amp;gt;

    it &quot;shouldn't throw an error for no rows or empty rows&quot;, -&amp;gt;
      expect( -&amp;gt; noRows ).not.toThrow()
      expect( -&amp;gt; oneEmptyRow ).not.toThrow()
      expect( -&amp;gt; twoEmptyRows ).not.toThrow()

    it &quot;shouldn't throw an error for rows with stones&quot;, -&amp;gt;
      expect( -&amp;gt; new HackenstringGame([[white]]) ).not.toThrow()
      expect( -&amp;gt; new HackenstringGame([[white, white]]) ).not.toThrow()
      expect( -&amp;gt; new HackenstringGame([[black]]) ).not.toThrow()
      expect( -&amp;gt; new HackenstringGame([[white, black]]) ).not.toThrow()

    it &quot;should throw an error for a row with a non-stone&quot;, -&amp;gt;
      expect( -&amp;gt; new HackenstringGame([[{}]]) ).toThrow()

  describe &quot;evaluation&quot;, -&amp;gt;

    it &quot;should be zero for empty games&quot;, -&amp;gt;
      expect( noRows.evaluation() ).toEqual(0)
      expect( twoEmptyRows.evaluation() ).toEqual(0)
    
    it &quot;shoudl be zero for equal games&quot;, -&amp;gt;
      expect( new HackenstringGame([[white], [black]]).evaluation() ).toEqual(0)
      
    it &quot;should be positive for games where white has more stones&quot;, -&amp;gt;
      whiteWins = new HackenstringGame [
        [white]
        [black, black, black]
        [white, white, white, white]
      ]
      expect( whiteWins.evaluation() ).toEqual 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zee Hackenbush continued:&lt;/p&gt;

&lt;h3 id=&quot;mixed-rows&quot;&gt;mixed rows&lt;/h3&gt;

&lt;p&gt;The rules of the game permit a row to have both white and black stones in any order. Let’s start with the simplest and second simplest games we’ve seen. This is the simplest:&lt;/p&gt;

&lt;p&gt;→&lt;/p&gt;

&lt;p&gt;White loses when playing first and wins when playing second. That’s worse than:&lt;/p&gt;

&lt;p&gt;→●&lt;/p&gt;

&lt;p&gt;Where White always wins, but better than:&lt;/p&gt;

&lt;p&gt;→○&lt;/p&gt;

&lt;p&gt;Where White always loses whether going first or second. These games evaluate to &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;+1&lt;/code&gt;, and &lt;code&gt;-1&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;Let’s add a stone to the same row on the last game:&lt;/p&gt;

&lt;p&gt;→○●&lt;/p&gt;

&lt;p&gt;This is a win for Black no matter what, but consider the fact that it’s a little “asymmetrical:” If White plays first, the game is transformed into:&lt;/p&gt;

&lt;p&gt;→○&lt;/p&gt;

&lt;p&gt;And Black wins as above. But if Black plays first, the game is transformed into:&lt;/p&gt;

&lt;p&gt;→&lt;/p&gt;

&lt;p&gt;And White doesn’t get a move. Thus, the game is clearly worse than zero, but not quite as bad as &lt;/p&gt;

&lt;p&gt;→○&lt;/p&gt;

&lt;p&gt;Where White never gets to move. What is better than &lt;code&gt;-1&lt;/code&gt; but worse than &lt;code&gt;0&lt;/code&gt;? Let’s guess &lt;code&gt;-1/2&lt;/code&gt;. And if that is the case, then this game:&lt;/p&gt;

&lt;p&gt;→●○&lt;/p&gt;

&lt;p&gt;Is going to be a win for White no matter what, and thus better than &lt;code&gt;0&lt;/code&gt; but not as good as:&lt;/p&gt;

&lt;p&gt;→●&lt;/p&gt;

&lt;p&gt;Which is a win for White without Black getting a move. We’ll call that game &lt;code&gt;+1/2&lt;/code&gt; since it lies between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;+1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we apply this reasoning to more complex mixed rows, we arrive at a surprisingly simple evaluation for each row. First, we evaluate and remove the first stone and all stones of the same colour. So given:&lt;/p&gt;

&lt;p&gt;→●○&lt;br /&gt;
→○○&lt;/p&gt;

&lt;p&gt;We take the first row as &lt;code&gt;+1&lt;/code&gt; and the second row as &lt;code&gt;-2&lt;/code&gt; for a total of &lt;code&gt;-1&lt;/code&gt; and are left with:&lt;/p&gt;

&lt;p&gt;→○&lt;br /&gt;
→&lt;/p&gt;

&lt;p&gt;Now we remove the first stone from each row and assign it a value of &lt;code&gt;+1/2&lt;/code&gt; or &lt;code&gt;-1/2&lt;/code&gt; respectively. In this case, we have one black stone so we get &lt;code&gt;-1/2&lt;/code&gt;. We add that to our existing &lt;code&gt;-1&lt;/code&gt; and end up with &lt;code&gt;-1 1/2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If there are any stones remaining (there weren’t in this example), we remove and assign them values of &lt;code&gt;+1/4&lt;/code&gt; or &lt;code&gt;-1/4&lt;/code&gt;. If there are still stones remaining, we remove and assign them values of &lt;code&gt;+1/8&lt;/code&gt; or &lt;code&gt;-1/8&lt;/code&gt;. This continues until there are no stones remaining.&lt;/p&gt;

&lt;p&gt;This seems very arbitrary, but if you play the games out, you see that the stones that are leftmost on a row are the most important because they cannot be removed by the other player, and the further a stone is to the right of those stones, the less significance it has to the outcome of a game.&lt;/p&gt;

&lt;h3 id=&quot;maude-works-with-dyadic-fractions&quot;&gt;maude works with dyadic fractions&lt;/h3&gt;

&lt;p&gt;Maude began by making some notes about dyadic fractions. A dyadic fraction is a fraction where the denominator is an even power of two.&lt;sup id=&quot;fnref:dyadic&quot;&gt;&lt;a href=&quot;#fn:dyadic&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;WARNING: THIS ESSAY IS A WORK IN PROGRESS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;notes:&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:Mandelbrot&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Benoit_Mandelbrot&quot;&gt;Benoit Mandelbrot&lt;/a&gt; (1924 − 2010)&lt;a href=&quot;#fnref:Mandelbrot&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:walker&quot;&gt;
      &lt;p&gt;See &lt;a href=&quot;http://web.archive.org/web/20070120052054/http://www.maths.nott.ac.uk/personal/anw/Research/Hack/&quot;&gt;Hackenstrings, and the 0.999… ?= 1 FAQ&lt;/a&gt; by A.N. Walker, School of Mathematical Sciences, University of Nottingham&lt;a href=&quot;#fnref:walker&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:dyadic&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dyadic_fraction&quot;&gt;Dyadic fractions or dyadic reals&lt;/a&gt;&lt;/p&gt;

      &lt;p&gt;{applyLeft} = require(‘allong.es’)
twoToPowerOf = applyLeft(Math.pow, 2)&lt;/p&gt;

      &lt;p&gt;class Dyadic
  constructor: (@a, @b) -&amp;gt;
    [@a, @b] = [@a / 2, @b - 1] until (@a % 2 or @b is 0)
  toString: -&amp;gt;
    denominator = twoToPowerOf(@b)
    if denominator is 1
      “” + @a
    else if @a &amp;gt; denominator
      [units, a] = [Math.floor(@a / denominator), @a % denominator]
      “#{units} #{a}/#{denominator}”
    else
      “#{@a}/#{denominator}”
  plus: (that) -&amp;gt;
    b = Math.max(this.b, that.b)
    a1 = this.a * twoToPowerOf(b - this.b)
    a2 = that.a * twoToPowerOf(b - that.b)
    new Dyadic(a1 + a2, b)&lt;/p&gt;

      &lt;p&gt;describe “dyadic”, -&amp;gt;&lt;/p&gt;

      &lt;p&gt;it “should have readable output”, -&amp;gt;
    expect( new Dyadic(5, 0).toString() ).toEqual ‘5’
    expect( new Dyadic(5, 1).toString() ).toEqual ‘2 1/2’
    expect( new Dyadic(5, 2).toString() ).toEqual ‘1 1/4’
    expect( new Dyadic(5, 3).toString() ).toEqual ‘5/8’&lt;/p&gt;

      &lt;p&gt;it “should handle overflow”, -&amp;gt;
    expect( new Dyadic(10, 3).toString() ).toEqual ‘1 1/4’&lt;/p&gt;

      &lt;p&gt;it “should handle plus”, -&amp;gt;
    expect( new Dyadic(5, 3).plus(new Dyadic(5, 3)).toString() ).toEqual ‘1 1/4’&lt;a href=&quot;#fnref:dyadic&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Arity and Partial Function Application</title>
          <link>http://raganwald.com/2013/03/21/arity-and-partial-function-application.html</link>
          <pubDate>Thu, 21 Mar 2013 00:00:00 -0400</pubDate>
          <author>reg@braythwayt.com (Reginald Braithwaite)</author>
          <guid>http://raganwald.com/2013/03/21/arity-and-partial-function-application</guid>
          <description>&lt;p&gt;This morning I was perusing &lt;a href=&quot;http://reddit.com/r/javascript&quot;&gt;/r/javascript&lt;/a&gt;, where I saw an announcement for version 2.0.0 of the &lt;a href=&quot;http://craftjs.org/&quot;&gt;Craft&lt;/a&gt; JavaScript utility belt library.&lt;/p&gt;

&lt;p&gt;Unlike other libraries, Craft is not afraid to extend the prototypes for built-in “classes” such as &lt;code&gt;Function&lt;/code&gt;. For example, Craft provides &lt;code&gt;Function.prototype.attach&lt;/code&gt;, which provides the same functionality as &lt;code&gt;Function.prototype.bind&lt;/code&gt;. I presume it’s for backward compatibility in browsers that don’t support &lt;code&gt;.bind&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, some libraries would shim &lt;code&gt;.bind&lt;/code&gt; if it isn’t present, and others would provide a function that calls &lt;code&gt;.bind&lt;/code&gt; if its present. There are trade-offs between the three approaches, and personally I think that it’s a win to have libraries that take different approaches to this issue so that programmers can select the approach that fits their personal needs.&lt;/p&gt;

&lt;p&gt;But it reminded me of an open issue in my own &lt;a href=&quot;http://allong.es&quot;&gt;allong.es&lt;/a&gt; library that I’m going to fix today. Let me show you. Here’s how &lt;code&gt;Function.prototype.bind works&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;whom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;whom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;polite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;polite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;bind&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;#39;hello bind&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And &lt;code&gt;Function.prototype.attach&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;casual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;howdy&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;casual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;attach&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;#39;howdy attach&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What’s the difference? Let’s check the function arity:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;polite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;casual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Function.prototype.bind&lt;/code&gt; returns a new function with the correct arity. &lt;code&gt;Function.prototype.attach&lt;/code&gt; returns a function that declares no arguments and instead extracts them from the &lt;code&gt;arguments&lt;/code&gt; pseudo-variable, therefore it has no arity. &lt;code&gt;Function.prototype.partial&lt;/code&gt; does the exact same thing.&lt;/p&gt;

&lt;p&gt;I knew to check this, because &lt;a href=&quot;http://allong.es&quot;&gt;allong.es&lt;/a&gt; uses the exact same technique. And frankly, it’s usually just fine. I’ve been doing things this way for years, and besides a little weight gain and declining eyesight, I feel just fine.&lt;/p&gt;

&lt;h3 id=&quot;when-arity-matters&quot;&gt;when arity matters&lt;/h3&gt;

&lt;p&gt;I noticed this &lt;a href=&quot;https://github.com/raganwald/allong.es/issues/5&quot;&gt;a few weeks ago&lt;/a&gt; when I started to work with some functions that need to know the arity of a function they are manipulating. I’m going to start talking about &lt;a href=&quot;http://allong.es&quot;&gt;allong.es&lt;/a&gt; now because I don’t want to make it seem like I’m criticizing &lt;a href=&quot;http://craftjs.org/&quot;&gt;Craft&lt;/a&gt;. Just the opposite, I think it’s neat-o, and I don’t know that it would be improved by changing this behaviour.&lt;/p&gt;

&lt;p&gt;But here’s why I am looking at changing &lt;a href=&quot;http://allong.es&quot;&gt;allong.es&lt;/a&gt;. Consider &lt;code&gt;curry&lt;/code&gt;, a function that turns a polyadic function into a chained or nested series of unary functions:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;allong.es&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;introduction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;, &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;, may I introduce you to &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;introduction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;alice&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;#39;hello, alice, may I introduce you to bob&amp;#39;&lt;/span&gt;
  
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curried&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;introduction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;curried&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;alice&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;#39;hello, alice, may I introduce you to bob&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The trouble is that the current implementation of &lt;code&gt;curry&lt;/code&gt; relies on checking the arity of the function you are currying. So we would expect that if we were to use &lt;code&gt;applyFirst&lt;/code&gt; to partially apply the first argument of &lt;code&gt;introduction&lt;/code&gt;, we should be able to curry the remaining two arguments:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applyLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;allong.es&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applyLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;introduction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;, &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;, may I introduce you to &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;casual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applyLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;introduction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;howdy&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;casual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ted&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;carol&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;#39;howdy, ted, may I introduce you to carol&amp;#39;&lt;/span&gt;
  
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curried&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;casual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;curried&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ted&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;carol&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; ???&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But no:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The problem is that &lt;code&gt;applyFirst&lt;/code&gt;, like Craft’s &lt;code&gt;Function.prototype.attach&lt;/code&gt;, returns a function with arity zero. But &lt;code&gt;curry&lt;/code&gt; relies on the function having the proper arity. So they each work separately, but not together.&lt;/p&gt;

&lt;h3 id=&quot;a-symptom-of-a-general-problem&quot;&gt;a symptom of a general problem&lt;/h3&gt;

&lt;p&gt;This is, in the very small, a problem that happens with a lot of “greenspunning.” When you’re emulating or hacking together new functionality, it is sometimes challenging but often straightforward to get it to work for the “common case,” the one in the tests.&lt;/p&gt;

&lt;p&gt;But in reality there will be little edge cases you don’t handle properly. They may seem incredibly rare when you think of a person writing some code that uses your function or library directly in their domain code, but they aren’t as rare as you think.&lt;/p&gt;

&lt;p&gt;The reason is that when we write libraries, we tend to think that because we’ve wrapped the implementation up inside of a nice polite API, we can use more “advanced” techniques like working with the &lt;code&gt;arguments&lt;/code&gt; array instead of parameters directly. There’s a subtle “social order” where libraries are expected to do the heavy lifting and client code is expected to be simple and readable, relying on libraries for anything complicated.&lt;/p&gt;

&lt;p&gt;When the client code calls several libraries, you end up with advanced code interacting with advanced code, and the mathematics of it are such that the likelihood of edge cases interacting rises exponentially.&lt;/p&gt;

&lt;h3 id=&quot;what-to-do&quot;&gt;what to do&lt;/h3&gt;

&lt;p&gt;Well, I’m going to change &lt;a href=&quot;http://allong.es&quot;&gt;allong.es&lt;/a&gt;. Given that it includes &lt;code&gt;applyLeft&lt;/code&gt; and &lt;code&gt;curry&lt;/code&gt;, it seems wrong to say that they aren’t compatible and composeable. But at the same time, there’s nothing unreasonable about a library like Craft simply choosing to emphasize KISS. Different design priorities produce different choices.&lt;/p&gt;

</description>
        </item>
      
    
      
        <item>
          <title>Six Questions</title>
          <link>http://raganwald.com/2013/03/20/six-questions.html</link>
          <pubDate>Wed, 20 Mar 2013 00:00:00 -0400</pubDate>
          <author>reg@braythwayt.com (Reginald Braithwaite)</author>
          <guid>http://raganwald.com/2013/03/20/six-questions</guid>
          <description>&lt;p&gt;Today, Michael Fogus announced that O’Reilly will be publishing his new book, &lt;a href=&quot;http://www.amazon.com/Functional-JavaScript-Introducing-Programming-Underscore-js/dp/1449360726/?tag=raganwald-20&quot;&gt;Functional JavaScript&lt;/a&gt; (It’s available for preorder at a discount &lt;a href=&quot;http://www.amazon.com/Functional-JavaScript-Introducing-Programming-Underscore-js/dp/1449360726/?tag=raganwald-20&quot;&gt;now&lt;/a&gt;). Fogus is no wide-eyed newcomer just discovering functional programming, he’s the author of the &lt;a href=&quot;http://fogus.github.com/lemonad/&quot;&gt;Lemonad&lt;/a&gt; library for advanced functional programming in JavaScript and is a co-author of the well-regarded  “&lt;a href=&quot;http://www.amazon.com/gp/product/1935182641/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1935182641&amp;amp;linkCode=as2&amp;amp;tag=raganwald001-20&quot;&gt;The Joy of Clojure&lt;/a&gt;.”&lt;/p&gt;

&lt;p&gt;On Hacker News, contributor “GhotiFish” raised a very reasonable concern:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I find these topics to be fun, and I want to use them. However, I can’t help but feel that if I use these design patterns, they might unintentionally obfuscate my intentions to my peers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a great question to ponder. It comes up many times, in many different forms, and it strikes at the very heart of the craft and profession of software development (as distinct from “programming” or “computer science”). Software Development is a team activity conducted over a medium to long time frame where success is measured by return on investment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We must always ask whether a new tool, a new language, a new technique, or even a new way to talk about an existing idea is a net positive return over the lifetime of the project.&lt;/strong&gt; The answer can and will change from project to project and especially from time to time within the same project.&lt;/p&gt;

&lt;p&gt;Here’s the time-honoured recipe for analyzing the situation: Ask yourself &lt;em&gt;who&lt;/em&gt;, &lt;em&gt;what&lt;/em&gt;, &lt;em&gt;where&lt;/em&gt;, &lt;em&gt;when&lt;/em&gt;, and &lt;em&gt;why&lt;/em&gt;. Once you are satisfied with the answers to the first six questions, investigate &lt;strong&gt;how&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;who&quot;&gt;who&lt;/h3&gt;

&lt;p&gt;I have a theory about Old Dogs.&lt;sup id=&quot;fnref:old&quot;&gt;&lt;a href=&quot;#fn:old&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; As is usual for blog posts, it is extrapolated from an extensive statistical study where &lt;code&gt;n=1&lt;/code&gt;. My theory is that the reason young adults find it easier to learn things than old adults has to do with their emotional attachments to their sense of self-definition.&lt;/p&gt;

&lt;p&gt;When you’re nineteen, you are still looking for your place in the world. If you’re currently programming in Python, you think it’s a cool language, but if I ask you what you’ll be doing in five years, you have no idea. To you, the world is changing at a breakneck pace and everything changes, therefore learning the new new thing is a part of life.&lt;/p&gt;

&lt;p&gt;Whereas, at fifty, I am often tempted to think that few things change. Once upon a time, old white men with radio stations and newspapers tried to control the outcome of elections. Technology disrupted those businesses so thoroughly that now, old white men with television stations and satellites try to control the outcome of elections.&lt;/p&gt;

&lt;p&gt;To a cynic, some things don’t change very much. I still shave by scraping hair off my chin with a razor. Maybe there are three or four blades instead of the one that was common when my voice first broke, but whoop-de-fucking-do.&lt;/p&gt;

&lt;p&gt;Old Dogs tend to see how much things are the same, and they perpetuate (or perpetrate!) this state of affairs by resisting change. They have a sense of identity (“I’m a Rails Programmer!”), and they fiercely defend it (“We don’t need no stinking node.js ‘round here”). That leads them to obstruct new ideas.&lt;/p&gt;

&lt;p&gt;You may find that although the benefits of a new idea in theory are terrific, in practice you will be derailed if your team is overloaded with Old Dogs. Whereas if your team has a critical mass of frisky pups, go for it! The pups may need help figuring things out, but they’ll wag their tails and fight over the chance to play, learn, and grow.&lt;/p&gt;

&lt;h3 id=&quot;what&quot;&gt;what&lt;/h3&gt;

&lt;p&gt;There is a difference between techniques that are novel and those that are merely unfamiliar.&lt;/p&gt;

&lt;p&gt;If I read the word “compose” in a codebase and don’t know what it means, I can google &lt;code&gt;function compose&lt;/code&gt; and find out just as if I was looking at a SQL query and needed to be reminded of the semantics of &lt;code&gt;RIGHT OUTER JOIN&lt;/code&gt;. The same goes for things like partial application,&lt;sup id=&quot;fnref:pa&quot;&gt;&lt;a href=&quot;#fn:pa&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; or trampolining.&lt;sup id=&quot;fnref:trampoline&quot;&gt;&lt;a href=&quot;#fn:trampoline&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;People can learn an unfamiliar technique. And once it is learned, they benefit from it forever. It is straightforward to learn something using Google and/or StackOverflow and/or an excellent programming blog.&lt;sup id=&quot;fnref:blog&quot;&gt;&lt;a href=&quot;#fn:blog&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; Hundreds of books are written about things like functional programming, including the subject of the comment.&lt;/p&gt;

&lt;p&gt;Familiarity can easily be acquired, provided the technique is unfamiliar to the team, but has been used extensively enough that there is an “information infrastructure” of books, blog posts, StackOverflow questions, sample codebases on Github, libraries, and so on.&lt;/p&gt;

&lt;p&gt;This may or may not be the case for some bone-headed attempt to write a client-side JavaScript application using Operational Transforms to mediate concurrent editing. &lt;sup id=&quot;fnref:guilty&quot;&gt;&lt;a href=&quot;#fn:guilty&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; But it is obviously the case for writing programs in a functional style.&lt;/p&gt;

&lt;h3 id=&quot;where&quot;&gt;where&lt;/h3&gt;

&lt;p&gt;I don’t mean what kind of company or team you have. When I ask, “where,” I mean, &lt;em&gt;Where in the code would you use this?&lt;/em&gt; In any non-trivial code base, some pieces work fine, are rarely updated, and nobody looks that them. Others a re a big ball of mud but are so mission critical that nobody wants to touch them for fear of breaking everything.&lt;/p&gt;

&lt;p&gt;New techniques do not necessarily “obfuscate” such code. If you replace a loop with a map, well, that’s not much of an improvement or an obfuscation. But if you can introduce some method decorators and dry up a ton of code while making the central responsibility of each method clearer, that might be a small investment in unfamiliarity that will pay a big dividend in understanding the underlying domain logic being expressed.&lt;/p&gt;

&lt;p&gt;An easy way to sort this out for yourself is to pretend that you’re in a meeting with an external analyst hired by the board of directors. “Go ahead and use that technique,” she says, “I’ll review it in a year. If it’s a net loss, you’re fired.”&lt;/p&gt;

&lt;p&gt;Obviously you want to pick the one place in the code where it is a clear net win, and avoid at all costs places where it has uncertain benefit. Where is that? Where isn’t that?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Software Development is a team activity conducted over a medium to long time frame where success is measured by return on investment. We must always ask whether a new tool, a new language, a new technique, or even a new way to talk about an existing idea is a net positive return over the lifetime of the project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;when&quot;&gt;when&lt;/h3&gt;

&lt;p&gt;Early in a project’s life, I think you have greater freedom to invest in “new” techniques. Over time, new techniques become familiar to a team, even if only because you keep ramming them down everybody’s throats until every new hire is given a tour of the codebase and told “You might as well figure this folding shit out, because it works and we’re tired of trying to rewrite it with for loops.”&lt;/p&gt;

&lt;p&gt;But early in a project, you have a longer time frame to collect the dividends. There will be more changes and upgrades. More new team members coming aboard that will find the code easier to read if you have correctly chosen techniques that clarify the intent once you get the hang of what a partial application does.&lt;/p&gt;

&lt;p&gt;And if your technique is anything better than mediocre, you have a fighting chance of everyone adopting it as they write new code, which means it becomes the standard and will one day become the legacy technique itself. You plant a flower and the bees pollinate it and the seeds spread and one day you will have a meadow full of flowers.&lt;/p&gt;

&lt;p&gt;Whereas, a legacy project may not be long for this world. Or at least, the rate of change is slower, therefore you get fewer dividends from your “enhancement.” Meanwhile, the costs of your enhancement are higher than on a new project, because you have to go in and rewrite everything with this new idea to avoid the codebase becoming a chaotic mess of whatever technique was in vogue when that particular line of code was written.&lt;/p&gt;

&lt;p&gt;There are exceptions, such as refactorings that make legacy code more testable, but again if we squint and scribble on the back of the envelope, we see that young projects can afford to take a few more chances.&lt;/p&gt;

&lt;h3 id=&quot;why&quot;&gt;why&lt;/h3&gt;

&lt;p&gt;Entertainment is no reason to try a new technique. Neither is learning on someone else’s dime. Everyone can be entertained ad infinitum reading about enchanted forests&lt;sup id=&quot;fnref:ef&quot;&gt;&lt;a href=&quot;#fn:ef&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; or schools teaching JavaScript programming.&lt;sup id=&quot;fnref:hilbert&quot;&gt;&lt;a href=&quot;#fn:hilbert&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt; In this day and age, you have plenty of opportunity to learn on your own. Everyone reading this blog has access to personal development environments. There’s zero need to fool around on a project that has a mission to deliver change in the world outside of your head.&lt;/p&gt;

&lt;p&gt;You can and should look for practical reasons that a new technique will untangle conflated concerns, or collect scattered responsibilities into a single concern, or clarify the underlying domain logic and intent of code.&lt;/p&gt;

&lt;p&gt;When such reasons exist, you have excellent motive to ask whether the technique also passes the &lt;em&gt;who&lt;/em&gt;, &lt;em&gt;what&lt;/em&gt;, &lt;em&gt;where&lt;/em&gt;, and &lt;em&gt;when&lt;/em&gt; questions. And if the answer to all of these is affirmative, Then press ahead with your new technique or idea or tool or even language.&lt;/p&gt;

&lt;p&gt;And if that new idea happens to be the proven-over-time and widely adopted techniques of functional programming as expressed in the JavaScript language, books like &lt;a href=&quot;http://www.amazon.com/Functional-JavaScript-Introducing-Programming-Underscore-js/dp/1449360726/?tag=raganwald-20&quot;&gt;Functional JavaScript&lt;/a&gt; will answer the sixth question:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;postscript: &lt;/p&gt;

&lt;p&gt;notes:&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:old&quot;&gt;
      &lt;p&gt;There is a saying that age is an attitude, not an amplitude. This goes double for the expression “Old Dogs.” Please don’t make ageist assumptions strictly because someone has a few battle scars and some grey hair. Likewise, don’t get your hopes up high just because someone is more worried about acne than wrinkles.&lt;a href=&quot;#fnref:old&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:pa&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://raganwald.com/2013/01/05/practical-applications-of-partial-application.html&quot;&gt;Practical Applications of Partial Application&lt;/a&gt;&lt;a href=&quot;#fnref:pa&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:trampoline&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Trampoline_(computing)#High_Level_Programming&quot;&gt;Trampoline (Computing) on Wikipedia&lt;/a&gt;&lt;a href=&quot;#fnref:trampoline&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:blog&quot;&gt;
      &lt;p&gt;Or a hit and miss blog like &lt;a href=&quot;http://raganwald.com&quot;&gt;this&lt;/a&gt;&lt;a href=&quot;#fnref:blog&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:guilty&quot;&gt;
      &lt;p&gt;As the author knows all too well!&lt;a href=&quot;#fnref:guilty&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:ef&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://raganwald.com/enchanted-forest/a-long-time-ago-in-a-village-far-far-away.html&quot;&gt;A long time ago, in a village far, far away&lt;/a&gt;&lt;a href=&quot;#fnref:ef&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:hilbert&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://raganwald.com/2013/02/21/hilberts-school.html&quot;&gt;Hilbert’s Grand JavaScript School&lt;/a&gt;&lt;a href=&quot;#fnref:hilbert&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Counting Crows (diversion)</title>
          <link>http://raganwald.com/enchanted-forest/counting-crows.html</link>
          <pubDate>Tue, 19 Mar 2013 00:00:00 -0400</pubDate>
          <author>reg@braythwayt.com (Reginald Braithwaite)</author>
          <guid>http://raganwald.com/enchanted-forest/counting-crows.coffee</guid>
          <description>&lt;p&gt;&lt;em&gt;Previously in&lt;/em&gt; &lt;a href=&quot;./horton.html&quot;&gt;A Surreal Encounter with a Winged Elephant&lt;/a&gt;, &lt;em&gt;Maude learned about proper flocks of birds that could be ordered into “ranks” based on the birds they personally knew in the flock. She learned that such flocks could be used to model the natural numbers and that one could perform addition with such flocks just by working directly with the birds.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;natural-numbers&quot;&gt;natural numbers&lt;/h3&gt;

&lt;p&gt;Maude had suddenly realized that a proper flock of birds could model the whole numbers, including the plus or “addition” function. She recapitulated what she knew:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Each bird on the branch represented a number&lt;/li&gt;
  &lt;li&gt;Presuming they were added in the manner Horton proscribed, each bird represented a number one larger than the number represented by the bird to its left.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;Plus&lt;/code&gt; operation modelled addition.&lt;/li&gt;
  &lt;li&gt;Since any bird plus Mayzie was equal to itself, Mayzie must represent zero.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;She collected her notes and added some new numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{any, map} = require('underscore')

class FlockingBird

  constructor: ({@knownOutrankedBy, @knownToOutrank} = {}) -&amp;gt;
    @knownOutrankedBy or= []
    @knownToOutrank   or= []
    
  standsAgainst: (rival) -&amp;gt;
    courtingBird = this
    case1 = any @knownOutrankedBy, (gb) -&amp;gt; rival.standsAgainst(gb)
    case2 = any rival.knownToOutrank, (lb) -&amp;gt; lb.standsAgainst(courtingBird)
    (not case1) and (not case2)

  confused: -&amp;gt;
    case1a = any @knownToOutrank, (lb) -&amp;gt; lb.confused()
    case1b = any @knownOutrankedBy, (gb) -&amp;gt; gb.confused()
    case2  = any @knownToOutrank, (lb) =&amp;gt;
      any @knownOutrankedBy, (gb) -&amp;gt;
        lb.standsAgainst(gb)
    !!(case1a or case1b or case2)
    
  isOfEqualRankTo: (otherBird) -&amp;gt;
    case1 = @standsAgainst(otherBird)
    case2 = otherBird.standsAgainst(this)
    case3 = not @confused() and not otherBird.confused()
    case1 and case2 and case3

  outranks: (otherBird) -&amp;gt;
    case1 = @standsAgainst(otherBird)
    case2 = not @isOfEqualRankTo(otherBird)
    case1 and case2

plus = (B1, B2) -&amp;gt;
  PL1B2s = map B1.knownToOutrank,  (L1) -&amp;gt; plus(L1, B2)
  PL2B1s = map B2.knownToOutrank,  (L2) -&amp;gt; plus(L2, B1)
  PG1B2s = map B1.knownOutrankedBy, (G1) -&amp;gt; plus(G1, B2)
  PG2B1s = map B2.knownOutrankedBy, (G2) -&amp;gt; plus(G2, B1)
  new FlockingBird
    knownToOutrank:   PL1B2s.concat(PL2B1s)
    knownOutrankedBy: PG1B2s.concat(PG2B1s)

Zero = new FlockingBird()
One = new FlockingBird
  knownToOutrank: [Zero]
Two = new FlockingBird
  knownToOutrank: [One]
Three = new FlockingBird
  knownToOutrank: [Two]
Four = new FlockingBird
  knownToOutrank: [Three]
Five = new FlockingBird
  knownToOutrank: [Four]
Six = new FlockingBird
  knownToOutrank: [Five]
# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But she had a question. “Horton,” she asked, “You said that Mayzie is sitting in the middle of the branch. Presuming that Mayzie is zero, what birds would sit to her left?”&lt;/p&gt;

&lt;p&gt;Horton bounced the question back to Maude: “What numbers are less than zero?”&lt;/p&gt;

&lt;h3 id=&quot;negative-numbers&quot;&gt;negative numbers&lt;/h3&gt;

&lt;p&gt;Maude quickly answered, “Negative numbers,” and then pursed her lips in thought. Up to that moment, all new “numbers” had been constructed by adding a new bird that knew it outranked the bird to its left. Which meant that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Every bird knew the bird to its left.&lt;/li&gt;
  &lt;li&gt;No bird knew the bird to its right.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There was no way to add a bird to the left of Mayzie using this scheme, since she didn’t know any birds she outranked. What to do? Maude realized that if she changed the scheme and altered Mayzie to accommodate a new bird to Mayzie’s left, she would just be changing Mayzie from a “zero” to a “one.” She had to leave Mayzie unaltered.&lt;/p&gt;

&lt;p&gt;So what could she do with the new bird to Mayzie’s left? It couldn’t know a bird to its left, she would have to construct an infinite chain of birds to make that work. Th enew bird to Mayzie’s left could only know a bird to its &lt;em&gt;right&lt;/em&gt;, i.e. Mayzie.&lt;/p&gt;

&lt;p&gt;Maude decided to try this. There was some logic to this, it would be symmetrical to the positive numbers. Now the number to Mayzie’s left would be outranked by Mayzie, only Mayzie wouldn’t know it. So Maude wrote:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NegativeOne = new FlockingBird
  knownOutrankedBy: [Zero]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if this held, by extension:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NegativeTwo = new FlockingBird
  knownOutrankedBy: [NegativeOne]
NegativeThree = new FlockingBird
  knownOutrankedBy: [NegativeTwo]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And so forth. She then decided to check her work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe &quot;negative one plus zero&quot;, -&amp;gt;
  
  it &quot;should equal negative one&quot;, -&amp;gt;
  
    expect( plus(NegativeOne, Zero).isOfEqualRankTo NegativeOne ).toEqual true
    expect( plus(Zero, NegativeOne).isOfEqualRankTo NegativeOne ).toEqual true

describe &quot;negative one plus negative one&quot;, -&amp;gt;
  
  it &quot;should equal negative one&quot;, -&amp;gt;
  
    expect( plus(NegativeOne, NegativeOne).isOfEqualRankTo NegativeTwo ).toEqual true

describe &quot;negative one plus positive one&quot;, -&amp;gt;
  
  it &quot;should equal negative one&quot;, -&amp;gt;
  
    expect( plus(NegativeOne, One).isOfEqualRankTo Zero ).toEqual true
    expect( plus(One, NegativeOne).isOfEqualRankTo Zero ).toEqual true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;dpplegangers&quot;&gt;döpplegangers&lt;/h3&gt;

&lt;p&gt;“Hmmm,” Maude mused, “Given a bird, how do we find the bird representing its negative?”&lt;/p&gt;

&lt;p&gt;Horton looked at her. “Well, I do know a way to find what I call the döppleganger of any bird in a flock. For example, the döppleganger of the bird immediately to Mayzie’s left is the bird immediately to Mayzie’s right, and so forth.”&lt;/p&gt;

&lt;p&gt;After some discussion that we will omit, Maude understood that given some bird &lt;code&gt;B&lt;/code&gt;, its  döppleganger could be identified as being the bird that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Is outranked by the döpplegangers of every bird &lt;code&gt;B&lt;/code&gt; is known to outrank.&lt;/li&gt;
  &lt;li&gt;Outranks the döpplegangers of every bird known to outrank &lt;code&gt;B&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;She made the following notes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FlockingBird::doppleganger = -&amp;gt; new FlockingBird
  knownOutrankedBy: map @knownToOutrank, (its) -&amp;gt; its.doppleganger()
  knownToOutrank: map @knownOutrankedBy, (its) -&amp;gt; its.doppleganger()
  
describe &quot;One's döppleganger&quot;, -&amp;gt;

  it &quot;should be of equal rank as NegativeOne&quot;, -&amp;gt;
    
    expect( One.doppleganger().isOfEqualRankTo(NegativeOne) ).toEqual true
  
describe &quot;NegativeOne's döppleganger&quot;, -&amp;gt;

  it &quot;should be of equal rank as One&quot;, -&amp;gt;
    
    expect( NegativeOne.doppleganger().isOfEqualRankTo(One) ).toEqual true
  
describe &quot;Three's döppleganger&quot;, -&amp;gt;

  it &quot;should be of equal rank as NegativeThree&quot;, -&amp;gt;
    
    expect( Three.doppleganger().isOfEqualRankTo(NegativeThree) ).toEqual true
  
describe &quot;NegativeThree's döppleganger&quot;, -&amp;gt;

  it &quot;should be of equal rank as Three&quot;, -&amp;gt;
    
    expect( NegativeThree.doppleganger().isOfEqualRankTo(Three) ).toEqual true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;squabbling-birds&quot;&gt;squabbling birds&lt;/h3&gt;

&lt;p&gt;Maude wasn’t surprised to hear that sometimes, instead of pairing up to work together, one bird would squabble with another another, following it around and undermining its rank. Unlike a pair, the effective rank of the two birds was equivalent to the rank of the squabbling bird subtracted from the bird it was harassing.&lt;/p&gt;

&lt;p&gt;Made had no difficulty working out the implications given what she already knew about pairings and döpplegangers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;subtract = (bird, squabbler) -&amp;gt; plus(bird, squabbler.doppleganger())

expect( subtract(Three, One).isOfEqualRankTo(Two) ).toEqual true

expect( subtract(Zero, NegativeOne).isOfEqualRankTo(One) ).toEqual true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;nesting-birds&quot;&gt;nesting birds&lt;/h3&gt;

&lt;p&gt;“Speaking of pairs,” Horton said, “I have discovered something interesting. When two birds mate and nest, they select and defend a territory. You might think that the size of their territory would be commensurate with the rank of the two birds as a pair, but this is not so. So strong is their instinct to protect their nest that when eggs or chicks are in the nest, their rank is equivalent to the &lt;em&gt;product&lt;/em&gt; of their ranks, not the sum.”&lt;/p&gt;

&lt;p&gt;Maude started to think in her mind how one might repeatedly sum the ranks of the birds to arrive at the proper result, but Horton was furiously drawing strange characters in the sand.&lt;/p&gt;

&lt;p&gt;After some exposition on his part, checking, and correction on Maude’s part, she transcribed his methods into her own notes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;multiply = (x, y) -&amp;gt;
  [XLYL, XLYR, XRYL, XRYR] = [[], [], [], []]

  for XL in x.knownToOutrank
    do -&amp;gt;
      XLy = multiply(XL, y)
      for YL in y.knownToOutrank
        do -&amp;gt;
          xYL = multiply(x, YL)
          XLYL.push plus(plus(XLy, xYL), multiply(XL, YL).doppleganger())
      for YR in y.knownOutrankedBy
        do -&amp;gt;
          xYR = multiply(x, YR)
          XLYR.push plus(plus(XLy, xYR), multiply(XL, YR).doppleganger())
    
  for XR in x.knownOutrankedBy
    do -&amp;gt;
      XRy = multiply(XR, y)
      for YL in y.knownToOutrank
        do -&amp;gt;
          xYL = multiply(x, YL)
          XRYL.push plus(plus(XRy, xYL), multiply(XR, YL).doppleganger())
      for YR in y.knownOutrankedBy
        do -&amp;gt;
          xYR = multiply(x, YR)
          XRYR.push plus(plus(XRy, xYR), multiply(XR, YR).doppleganger())
          


  new FlockingBird 
    knownToOutrank: XLYL.concat(XRYR)
    knownOutrankedBy: XLYR.concat(XRYL)
  
  
describe &quot;multiplication by zero&quot;, -&amp;gt;

  it &quot;should turn any number into zero&quot;, -&amp;gt;
    expect( multiply(Zero, Zero).isOfEqualRankTo(Zero) ).toEqual true
    expect( multiply(Zero, One).isOfEqualRankTo(Zero) ).toEqual true
    expect( multiply(One, Zero).isOfEqualRankTo(Zero) ).toEqual true
    expect( multiply(Zero, Two).isOfEqualRankTo(Zero) ).toEqual true
    expect( multiply(Two, Zero).isOfEqualRankTo(Zero) ).toEqual true
    
    expect( multiply(Zero, Zero).isOfEqualRankTo(One) ).toEqual false
    expect( multiply(Zero, One).isOfEqualRankTo(Two) ).toEqual false
    expect( multiply(One, Zero).isOfEqualRankTo(Three) ).toEqual false
    expect( multiply(Zero, Two).isOfEqualRankTo(Two) ).toEqual false
    expect( multiply(Two, Zero).isOfEqualRankTo(One) ).toEqual false
  
describe &quot;multiplication by one&quot;, -&amp;gt;

  it &quot;should turn any number into itself&quot;, -&amp;gt;
    expect( multiply(Zero, One).isOfEqualRankTo(Zero) ).toEqual true
    expect( multiply(One, Zero).isOfEqualRankTo(Zero) ).toEqual true
    expect( multiply(One, One).isOfEqualRankTo(One) ).toEqual true
    expect( multiply(One, Two).isOfEqualRankTo(Two) ).toEqual true
    expect( multiply(Two, One).isOfEqualRankTo(Two) ).toEqual true
    
    expect( multiply(Zero, One).isOfEqualRankTo(One) ).toEqual false
    expect( multiply(One, Zero).isOfEqualRankTo(Two) ).toEqual false
    expect( multiply(One, One).isOfEqualRankTo(Zero) ).toEqual false
    expect( multiply(One, Two).isOfEqualRankTo(Three) ).toEqual false
    expect( multiply(Two, One).isOfEqualRankTo(One) ).toEqual false
  
describe &quot;multiplication by two&quot;, -&amp;gt;

  it &quot;should double any number&quot;, -&amp;gt;
    expect( multiply(Two, Two).isOfEqualRankTo(Four) ).toEqual true
    expect( multiply(Two, Three).isOfEqualRankTo(Six) ).toEqual true
    expect( multiply(Three, Two).isOfEqualRankTo(Six) ).toEqual true
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Continue “&lt;a href=&quot;./horton.html#what-does-it-mean&quot;&gt;A Surreal Encounter With a Winged Elephant&lt;/a&gt;”&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>A Surreal Encounter with a Winged Elephant</title>
          <link>http://raganwald.com/enchanted-forest/horton.html</link>
          <pubDate>Sun, 17 Mar 2013 00:00:00 -0400</pubDate>
          <author>reg@braythwayt.com (Reginald Braithwaite)</author>
          <guid>http://raganwald.com/enchanted-forest/horton.coffee</guid>
          <description>&lt;p&gt;Previous: &lt;a href=&quot;./a-long-time-ago-in-a-village-far-far-away.html&quot;&gt;A long time ago, in a village far, far away&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Moses flew along, showing the way to The Magnificent Smullyan Bird’s nest. As they walked along, Maude saw the most curious sight: A small winged elephant perched on a nest.&lt;sup id=&quot;fnref:names&quot;&gt;&lt;a href=&quot;#fn:names&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;“What is that!?”&lt;/p&gt;

&lt;p&gt;Moses clicked his beak. “That is Horton Jr., or just plain Horton. I don’t know why everyone is so fascinated with his appearance. He can barely fly, his beak is all rubbery, and he lacks any plumage of note. Mind you, he is something of an expert on certain subjects and I do consult him from time to time.”&lt;/p&gt;

&lt;p&gt;Maude asked about his expertise.&lt;/p&gt;

&lt;p&gt;“Well, he does a lot of work playing with pebbles on vast grids that he lays out.”&lt;sup id=&quot;fnref:life&quot;&gt;&lt;a href=&quot;#fn:life&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;“Speaking of egocentricity, Horton actually claims that by following certain rules, his pebbles can answer any question that songbirds like the Starling and Kestrel can answer. I think it’s interesting, but outside of fanciful flying creations like gliders and heavyweight spaceships, I don’t see the point.”&lt;/p&gt;

&lt;p&gt;Maude was interested. Pebbles? “Well,” Moses said, “I alluded to this earlier. A certain lesser class of bird likes to build a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bowerbird&quot;&gt;bower&lt;/a&gt; out of various found objects.”&lt;/p&gt;

&lt;p&gt;For example, I could show you the Stuart’s &lt;a href=&quot;http://twitter.com/tomstuart&quot;&gt;Tombird&lt;/a&gt;. It builds an elaborate bower out of just one material, chips of red crystal. It is intelligent, and claims its chips of Ruby can do various tasks like count to one hundred or even write nonsensical words like “fizz” or “buzz.”&lt;sup id=&quot;fnref:nothing&quot;&gt;&lt;a href=&quot;#fn:nothing&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;“In any event,” continued Moses, “We may as well say hello to Horton since we’re here.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hortonjr.jpg&quot; alt=&quot;Horton Jr.&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;horton&quot;&gt;horton&lt;/h3&gt;

&lt;p&gt;Moses introduced Maude to Horton. After exchanging pleasantries, Maude asked Horton what kind of song he sang.&lt;/p&gt;

&lt;p&gt;“I am not particularly interested in songs,” said Horton, “I am working at the moment on bird sociology, particularly flocking birds. As you may know, some birds, like Schönfinkel’s Bright Bird and myself, are fairly solitary. Others like to live in large flocks.”&lt;/p&gt;

&lt;p&gt;“In most such flocks, there is a strict &lt;em&gt;pecking order&lt;/em&gt;. What interests me is how such flocks behave when each bird is autonomous and there is no centralized control over the order of rank for the birds.”&lt;/p&gt;

&lt;p&gt;“I will show you,” started Horton, scribbling some marks in the dirt with a stick he held in his trunk. Moses hastily intervened.&lt;/p&gt;

&lt;p&gt;“Alas, Horton, we are on our way to see The Magnificent Smullyan Bird so that Maude can learn about hopeless egocentricity and do not have time—” Horton would hear nothing of it. “Nonsense! Egocentricity can wait, that is fascinating for gaudy plumage fanciers but serious birds pay attention to sociology.”&lt;/p&gt;

&lt;p&gt;“Sit. Pay attention. Listen.”&lt;/p&gt;

&lt;p&gt;Moses squawked but in the end, he and Maude settled down as Horton began to speak.&lt;/p&gt;

&lt;h3 id=&quot;surreal-birds&quot;&gt;surreal birds&lt;/h3&gt;

&lt;p&gt;“I have discovered that each bird in a flock knows some set of birds in its flock. Flocks are large, and in some cases no one bird personally knows every other bird in the flock. Each bird divides the birds it knows into two sets: Those that outrank it in the flock, and those it outranks in the flock. I call them &lt;em&gt;greater known birds&lt;/em&gt; and &lt;em&gt;lesser known birds&lt;/em&gt; respectively.”&lt;/p&gt;

&lt;p&gt;“Of course, a bird may not know any birds it outranks in the flock. That doesn’t mean it doesn’t outrank any birds, it just doesn’t personally know any birds it outranks. The same goes for birds that outrank it: A bird may not personally know any birds it outranks, but that does not mean there aren’t any in the flock.”&lt;/p&gt;

&lt;p&gt;Maude was making notes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{any} = require('underscore')

class FlockingBird
  constructor: ({@knownOutrankedBy, @knownToOutrank} = {}) -&amp;gt;
    @knownOutrankedBy or= []
    @knownToOutrank   or= []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“Now these birds often compete with each other: For good nesting sites, for mates, for a piece of food, for a good perch on a branch. Each will instinctively show its threat display and try to get the other to back down. As they do so, they screech at each other. When one stands fast and the other not stand its ground, the one that stands fast &lt;em&gt;always&lt;/em&gt; outranks the other.&lt;/p&gt;

&lt;p&gt;“I wondered how they sorted it out, so I observed and made extensive notes. I have discovered that they obey both of two simple rules. To simplify the explanation, imagine a bird is displaying on its courtship stage when a rival appears. We have the courting bird and the rival who square off in a challenge.&lt;/p&gt;

&lt;p&gt;The first rule is that in order to stand its ground, the courting bird cannot know any bird ranked greater than the courting bird such that the rival would stand its ground against the greater ranked bird.&lt;/p&gt;

&lt;p&gt;The second rules is that in order to stand its ground, the rival cannot know any bird lesser than the rival that stands fast against the courting bird.&lt;/p&gt;

&lt;p&gt;Maude gave this some thought, and then wrote:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  standsAgainst: (rival) -&amp;gt;
    courtingBird = this
    case1 = any @knownOutrankedBy, (gb) -&amp;gt; rival.standsAgainst(gb)
    case2 = any rival.knownToOutrank, (lb) -&amp;gt; lb.standsAgainst(courtingBird)
    (not case1) and (not case2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“The first important rule about flocking birds is that they like to have a well-defined place in the flock’s pecking order. Specifically, they become &lt;em&gt;confused&lt;/em&gt; if either of the following cases are true:&lt;/p&gt;

&lt;p&gt;“First, a bird is confused if it knows a confused bird. Second, a bird is confused if any of the birds it knows it outranks would stand fast against a bird it knows outrank it.”&lt;/p&gt;

&lt;p&gt;Maude quickly wrote:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  confused: -&amp;gt;
    case1a = any @knownToOutrank, (lb) -&amp;gt; lb.confused()
    case1b = any @knownOutrankedBy, (gb) -&amp;gt; gb.confused()
    case2  = any @knownToOutrank, (lb) =&amp;gt;
      any @knownOutrankedBy, (gb) -&amp;gt;
        lb.standsAgainst(gb)
    !!(case1a or case1b or case2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Moses was preening itself, acting as disinterested as possible, but he fixed his eye on Horton and appeared to be thinking hard when Horton posed a question:&lt;/p&gt;

&lt;p&gt;“Now that you know the basic rules of sociology, I present to you &lt;em&gt;Mayzie&lt;/em&gt;, a flocking bird that is so self-centered it doesn’t know any other birds. Is Mayzie confused?”&lt;/p&gt;

&lt;p&gt;Maude thought for a moment and then wrote:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe &quot;Lazy Mayzie&quot;, -&amp;gt;

  Mayzie = new FlockingBird()
  
  it &quot;should not be confused&quot;, -&amp;gt;
    expect( Mayzie.confused() ).toEqual false
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;notation&quot;&gt;notation&lt;/h3&gt;

&lt;p&gt;Here Horton stopped and stared at Maude’s writing. “And what do you call this system of notation you have?”&lt;/p&gt;

&lt;p&gt;“CoffeeScript,” said Maude, “because when it gets complicated, I need to drink a lot of coffee to work it out by hand.”&lt;sup id=&quot;fnref:cs&quot;&gt;&lt;a href=&quot;#fn:cs&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;“Actually,” she said, “My uncle Brendan&lt;sup id=&quot;fnref:be&quot;&gt;&lt;a href=&quot;#fn:be&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; devised a notation for solving certain problems to deal with the appearance and behaviour of web spiders. He called it JavaScript, no doubt because of our family’s coffee plantation business. My cousin Jeremy&lt;sup id=&quot;fnref:jeremy&quot;&gt;&lt;a href=&quot;#fn:jeremy&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; liked Brendan’s ideas, but found them awkward for certain classes of problems and streamlined it somewhat. Jeremy called his variation CoffeeScript, and he taught it to me.”&lt;/p&gt;

&lt;p&gt;After explaining the details of her notation to Horton, he agreed with her assessment. “Yes, Mayzie isn’t very sociable, but she isn’t confused.”&lt;/p&gt;

&lt;p&gt;Horton continued with his explanation. “Some flocks have confused birds, some do not. I call a flock that has no confused birds a &lt;em&gt;proper flock&lt;/em&gt;. Every proper flock has a simple pecking order. That is, you can arrange all of the birds in a line (as if perched on a branch), and there is always an arrangement such that every bird stands fast against any bird to its left.”&lt;sup id=&quot;fnref:exercise&quot;&gt;&lt;a href=&quot;#fn:exercise&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/suckamc/3308221895/&quot; title=&quot;Don King Bird by Martin Cathrae, on Flickr&quot;&gt;&lt;img src=&quot;http://farm4.staticflickr.com/3123/3308221895_2863aef68b_b.jpg&quot; alt=&quot;Don King Bird&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;birds-on-a-branch&quot;&gt;birds on a branch&lt;/h3&gt;

&lt;p&gt;Horton was gathering enthusiasm, and he fairly trumpeted the next explanation. “This idea of a branch where birds can perch in order is interesting. Let’s start with an empty branch. Now, let’s place Mayzie on the branch by herself in the middle:”&lt;/p&gt;

&lt;p&gt;“Mayzie obviously forms a proper flock as she is not confused. As we have established, Mayzie doesn’t know any birds. But what if a bird alights to her right, a bird that knows her, perhaps from reading a book.&lt;sup id=&quot;fnref:seuss&quot;&gt;&lt;a href=&quot;#fn:seuss&quot; rel=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt; This bird knows and outranks Mayzie.”&lt;/p&gt;

&lt;p&gt;Maude considered, then wrote:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Mayzie = new FlockingBird()
OneRight = new FlockingBird
  knownToOutrank: [Mayzie]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maude asked, “Do these two birds form a proper flock?”&lt;/p&gt;

&lt;p&gt;Horton curled his trunk and smiled. “You tell me! Do these two birds form a proper flock? And if so, do they obey the rules for ordering on a branch?”&lt;/p&gt;

&lt;p&gt;Maude worked things out in her mind for a few moments, writing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe &quot;a flock with two birds&quot;, -&amp;gt;

  it &quot;should not contain confused birds&quot;, -&amp;gt;
    expect( Mayzie.confused() ).toEqual false
    expect( OneRight.confused() ).toEqual false
      
  it &quot;should have a linear pecking order&quot;, -&amp;gt;
    expect( OneRight.standsAgainst(Mayzie) ).toEqual true
    expect( Mayzie.standsAgainst(OneRight) ).toEqual false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“Yes,” agreed Horton, “They form a proper flock. And now let us consider a bird that alights to the right of our bird to the right of Mayzie. It knows the bird to the right of Mayzie and knows that it outranks that bird. Do we have a proper flock?”&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TwoRight = new FlockingBird
  knownToOutrank: [OneRight]

describe &quot;a flock with three birds&quot;, -&amp;gt;

  it &quot;should not contain confused birds&quot;, -&amp;gt;
    expect( Mayzie.confused() ).toEqual false
    expect( OneRight.confused() ).toEqual false
    expect( TwoRight.confused() ).toEqual false

  it &quot;should have a linear pecking order&quot;, -&amp;gt;
    expect( Mayzie.standsAgainst(OneRight) ).toEqual false
    expect( Mayzie.standsAgainst(TwoRight) ).toEqual false
    expect( OneRight.standsAgainst(Mayzie) ).toEqual true
    expect( OneRight.standsAgainst(TwoRight) ).toEqual false
    expect( TwoRight.standsAgainst(Mayzie) ).toEqual true
    expect( TwoRight.standsAgainst(TwoRight) ).toEqual true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“Interesting things happen when we consider this flock that is created by birds successively alighting to the right of the previous bird where each bird knows the bird immediately to its left (except for Mayzie).”&lt;/p&gt;

&lt;h3 id=&quot;libert-galit-et-fraternit&quot;&gt;liberté, égalité, et fraternité&lt;/h3&gt;

&lt;p&gt;“First,” said Horton, “What happens if we are given two birds where the first stands fast against the second &lt;em&gt;and&lt;/em&gt; the second bird stands fast against the first? Do they form a proper flock?”&lt;/p&gt;

&lt;p&gt;Maude looked confused.&lt;/p&gt;

&lt;p&gt;“No,” said Horton, “Do not become confused yourself. We said earlier that a proper flock can be arranged along a branch such that every bird stands fast against the bird to its left. This implies that the bird to its right stands fast against it. But we said &lt;em&gt;nothing&lt;/em&gt; about whether a bird stands fast against a bird to its right.”&lt;/p&gt;

&lt;p&gt;“If two birds stand fast against each other, they have &lt;em&gt;equal rank&lt;/em&gt; and form a proper flock.”&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FlockingBird::isOfEqualRankTo = (otherBird) -&amp;gt;
  case1 = @standsAgainst(otherBird)
  case2 = otherBird.standsAgainst(this)
  case3 = not @confused() and not otherBird.confused()
  case1 and case2 and case3

describe &quot;equality&quot;, -&amp;gt;

  it &quot;should be true for Mayzie vs Mayzie&quot;, -&amp;gt;
    expect( Mayzie.isOfEqualRankTo(Mayzie) ).toEqual true
    
  it &quot;should be true for OneRight vs OneRight&quot;, -&amp;gt;
    expect( OneRight.isOfEqualRankTo(OneRight) ).toEqual true
    
  it &quot;should be false for Mayzie vs OneRight&quot;, -&amp;gt;
    expect( Mayzie.isOfEqualRankTo(OneRight) ).toEqual false
    expect( OneRight.isOfEqualRankTo(Mayzie) ).toEqual false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“Now,” continued Horton, “We can define the relationship you were thinking of when we consider a strict ordering of birds in a flock. A bird &lt;em&gt;outranks&lt;/em&gt; another bird if it stands fast against that bird and it is not of equal rank to that bird.”&lt;/p&gt;

&lt;p&gt;Maude hastily updated her notes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FlockingBird::outranks = (otherBird) -&amp;gt;
  case1 = @standsAgainst(otherBird)
  case2 = not @isOfEqualRankTo(otherBird)
  case1 and case2
  
describe &quot;outranking&quot;, -&amp;gt;

  it &quot;should work for Mayzie vs. Mayzie&quot;, -&amp;gt;
    expect( Mayzie.outranks(Mayzie) ).toEqual false
    
  it &quot;should work for Mayzie vs. OneRight&quot;, -&amp;gt;
    expect( Mayzie.outranks(OneRight) ).toEqual false
    expect( OneRight.outranks(Mayzie) ).toEqual true
    
  it &quot;should work for Mayzie vs. TwoRight&quot;, -&amp;gt;
    expect( Mayzie.outranks(TwoRight) ).toEqual false
    expect( TwoRight.outranks(Mayzie) ).toEqual true  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“One interesting property of birds belonging to proper flocks is that they will sometimes pair up and work together to defend a nest or bit of food. Sometimes two unattached birds will pair up to chase away a higher-ranked bird from attracting a mate and so on.&lt;/p&gt;

&lt;p&gt;“We have defined the ranking for birds against each other. It turns out that the birds have an equally rigorous way of ranking pairs of birds. Given any two birds &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, their pairing has rank equal to some third bird we shall call &lt;code&gt;P(x, y)&lt;/code&gt;. How do we find this rank? Let’s take two birds &lt;code&gt;B1&lt;/code&gt; and &lt;code&gt;B2&lt;/code&gt;. From my observations, four rules apply. The first two identify birds that the pair must outrank:”&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If &lt;code&gt;B1&lt;/code&gt; outranks some bird &lt;code&gt;L1&lt;/code&gt;, then &lt;code&gt;P(B1, B2)&lt;/code&gt; must outrank &lt;code&gt;P(L1, B2)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If &lt;code&gt;B2&lt;/code&gt; outranks some bird &lt;code&gt;L2&lt;/code&gt;, then &lt;code&gt;P(B1, B2)&lt;/code&gt; must outrank &lt;code&gt;P(L2, B1)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;“The next two rules identify birds that must outrank the pair:”&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If some bird &lt;code&gt;G1&lt;/code&gt; outranks &lt;code&gt;B1&lt;/code&gt;, then &lt;code&gt;P(G1, B2)&lt;/code&gt; must outrank &lt;code&gt;P(B1, B2)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If some bird &lt;code&gt;G2&lt;/code&gt; outranks &lt;code&gt;B2&lt;/code&gt;, then &lt;code&gt;P(G2, B1)&lt;/code&gt; must outrank &lt;code&gt;P(B1, B2)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Maude pursed her lips. “That’s all very well, but how do we &lt;em&gt;find&lt;/em&gt; such a bird? How do we know what birds a bird &lt;code&gt;B1&lt;/code&gt; or &lt;code&gt;B2&lt;/code&gt; might outrank?” Horton’s replied with deep simplicity: “Ask them!”&lt;/p&gt;

&lt;p&gt;Maude considered, then decided to try things out and see if they worked:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{map} = require('underscore')

P = (B1, B2) -&amp;gt;
  PL1B2s = map B1.knownToOutrank,  (L1) -&amp;gt; P(L1, B2)
  PL2B1s = map B2.knownToOutrank,  (L2) -&amp;gt; P(L2, B1)
  PG1B2s = map B1.knownOutrankedBy, (G1) -&amp;gt; P(G1, B2)
  PG2B1s = map B2.knownOutrankedBy, (G2) -&amp;gt; P(G2, B1)
  new FlockingBird
    knownToOutrank:   PL1B2s.concat(PL2B1s)
    knownOutrankedBy: PG1B2s.concat(PG2B1s)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Horton was busy eating some ground nuts, so she showed her progress to Moses. “How,” she wondered, “Do I check my work?” Moses provided some hints:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe &quot;pairing Mayzie with a bird&quot;, -&amp;gt;

  it &quot;should be the same rank as that bird&quot;, -&amp;gt;
    expect( P(Mayzie, Mayzie).isOfEqualRankTo(Mayzie) ).toEqual true
    expect( P(Mayzie, OneRight).isOfEqualRankTo(OneRight) ).toEqual true
    expect( P(OneRight, Mayzie).isOfEqualRankTo(OneRight) ).toEqual true
    expect( P(Mayzie, TwoRight).isOfEqualRankTo(TwoRight) ).toEqual true
    expect( P(TwoRight, Mayzie).isOfEqualRankTo(TwoRight) ).toEqual true

describe &quot;pairing OneRight with itself&quot;, -&amp;gt;
    
  it &quot;should be the same rank as TwoRight&quot;, -&amp;gt;
    expect( P(OneRight, OneRight).isOfEqualRankTo(TwoRight) ).toEqual true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;She showed her work to Horton. “Wait,” she said suddenly, “I should use a more descriptive name. I’ll just change &lt;code&gt;P&lt;/code&gt; to &lt;code&gt;Pair&lt;/code&gt;.” Horton demurred. “Actually,” he said, “The correct word isn’t ‘pair,’ it’s &lt;strong&gt;plus&lt;/strong&gt;.”&lt;/p&gt;

&lt;p&gt;It took a few moments for the revelation to sink in, then Maude laughed in delight. &lt;a href=&quot;./counting-crows.html&quot; title=&quot;Counting Crows&quot;&gt;They explored the relationship between proper flocks and numbers further&lt;/a&gt;, then Maude spoke up.&lt;/p&gt;

&lt;h3 id=&quot;what-does-it-mean&quot;&gt;what does it mean?&lt;/h3&gt;

&lt;p&gt;“Well,” Maude said, “This is all very interesting. But what does it mean? Is this a kind of ornithological circus trick? Or does it have some deep significance?”&lt;/p&gt;

&lt;p&gt;Horton looked at her blankly. His trunk quivered, and tears began to well up in his eyes. Moses hurriedly consoled him. “There, there, she didn’t mean it, she knows nothing of your family history. She’s just interested in your work, that’s all.”&lt;/p&gt;

&lt;p&gt;Horton calmed down, but not before his trunk tooted plaintively a few times. Then he sighed and turned away. “I must get back to my work,” he said quietly.&lt;/p&gt;

&lt;h3 id=&quot;onwards&quot;&gt;onwards&lt;/h3&gt;

&lt;p&gt;“Yes, of course, and most important work it is.” Said Moses. “And we really MUST be on our way. Thank you so much, good-bye, good-bye!” Maude said her good-byes as well and they walked away.&lt;/p&gt;

&lt;p&gt;“I’m so sorry!” sad Maude, “I have no idea what I did to offend him…”&lt;/p&gt;

&lt;p&gt;Moses fluttered awkwardly. “Well, it’s a very short story, but we are in a hurry to catch The Magnificent Smullyan Bird, so perhaps I will tell you about it another time. In the mean time, if you’ll just follow me…”&lt;/p&gt;

&lt;p&gt;And together, Moses the Schönfinkel’s Bright Bird and Maude the Curious Person travelled further into the Enchanted Forest.&lt;/p&gt;

&lt;h3 id=&quot;but&quot;&gt;but&lt;/h3&gt;

&lt;p&gt;After walking on a bit, Moses stopped and asked Maude, “What is troubling you?”&lt;/p&gt;

&lt;p&gt;Maude said that nothing was troubling her, but Moses cawed and squawked at her until she admitted that she was still troubled by what she had learned from Horton.&lt;/p&gt;

&lt;p&gt;“I hate it when I learn something like this and leave it at that. It feels like there is more to the story, something very important to understand about the relationship between proper flocks and numbers.” &lt;/p&gt;

&lt;p&gt;“It can’t just be a silly game, can it?”&lt;/p&gt;

&lt;p&gt;Moses said nothing for a moment, then he seemed to shrink in defeat.&lt;/p&gt;

&lt;p&gt;“I really want you to meet Smullyan, but I can’t allow you to carry this problem unresolved in your head. Come, we are going to talk to Zee Hackenbush Bird. Like Stuart’s Tombird, he is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bowerbird&quot;&gt;bowerbird&lt;/a&gt;, he lacks the refinement of proper plumage.”&lt;/p&gt;

&lt;p&gt;“But I have heard him talk of Horton’s work and I know he can explain its significance to you.”&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Coming Soon: &lt;em&gt;Zee Hackenbush Bird&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;notes:&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:names&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Moses_Schönfinkel&quot;&gt;Moses Schönfinkel&lt;/a&gt; was a Russian logician and mathematician, known for the invention of combinatory logic. Lois Maude Barzey née Braithwaite was my grandmother, and my daughter is Clara Maude Braithwaite. And of course, &lt;a href=&quot;https://en.wikipedia.org/wiki/Raymond_Smullyan&quot;&gt;Raymond Merrill Smullyan&lt;/a&gt; is an American mathematician, concert pianist, logician, Taoist philosopher, and magician. He has his own &lt;a href=&quot;http://www.youtube.com/profile?user=rsmullyan&amp;amp;view=videos&quot;&gt;Youtube channel&lt;/a&gt;.&lt;a href=&quot;#fnref:names&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:life&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&quot;&gt;Conway’s Game of Life&lt;/a&gt;&lt;a href=&quot;#fnref:life&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:nothing&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://codon.com/programming-with-nothing&quot;&gt;Programming with Nothing&lt;/a&gt;&lt;a href=&quot;#fnref:nothing&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:cs&quot;&gt;
      &lt;p&gt;These stories are written in &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; and interpreted in place as &lt;a href=&quot;http://coffeescript.org&quot;&gt;Literate CoffeeScript&lt;/a&gt; files. They are translated to JavaScript and then &lt;a href=&quot;https://github.com/mhevery/jasmine-node&quot;&gt;jasmine-node&lt;/a&gt; is used to evaluate them as specifications.&lt;a href=&quot;#fnref:cs&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:be&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://brendaneich.com&quot;&gt;Brendan Eich&lt;/a&gt; is the inventor of JavaScript.&lt;a href=&quot;#fnref:be&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:jeremy&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.ashkenas.com&quot;&gt;Jeremy Ashkenas&lt;/a&gt; invented CoffeeScript&lt;a href=&quot;#fnref:jeremy&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:exercise&quot;&gt;
      &lt;p&gt;As an exercise, prove this is the case.&lt;a href=&quot;#fnref:exercise&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:seuss&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Horton_Hatches_the_Egg&quot;&gt;Horton Hatches the Egg&lt;/a&gt;&lt;a href=&quot;#fnref:seuss&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>A long time ago, in a village far, far away</title>
          <link>http://raganwald.com/enchanted-forest/a-long-time-ago-in-a-village-far-far-away.html</link>
          <pubDate>Sat, 16 Mar 2013 00:00:00 -0400</pubDate>
          <author>reg@braythwayt.com (Reginald Braithwaite)</author>
          <guid>http://raganwald.com/enchanted-forest/prelude.coffee</guid>
          <description>&lt;p&gt;A long time ago, in a village far, far away, there was a young, intelligent woman named Maude.&lt;sup id=&quot;fnref:maude&quot;&gt;&lt;a href=&quot;#fn:maude&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Maude lived in a village beside a river that ran through mogotés of arable land, that was rich and ripe for planting tobacco and coffee. A woman of Maude’s resourcefulness could easily live a long and productive life in this village, but she had a taste for adventure and found village life rather dull to be perfectly honest.&lt;/p&gt;

&lt;p&gt;When she reached the age where this sort of thing is done, she declined the offers of marriage that awaited her and carefully packed all of her belongings in a bag. Her parents gave her the finest tobacco and coffee that grew in their estate and she took with her the various pots and pans and grinders and things she would need to enjoy or share the treasures of her land with others.&lt;/p&gt;

&lt;p&gt;Telling everyone that she was off to settle new lands in the name of her family, she set out early one morning in the direction of some mountains to cross, and after a last wave, she turned her eyes to the horizon and resolved never to look back. As soon as she was out of sight of the village, she stopped and changed direction, picking her way carefully towards an enormous forest.&lt;/p&gt;

&lt;p&gt;Maude took pains to ensure that nobody saw her going towards the forest, because she didn’t want her family to worry. For like many such forests to be found in fable and legend, this was an &lt;em&gt;enchanted&lt;/em&gt; forest.&lt;/p&gt;

&lt;p&gt;When the valley was first settled, many entered the forest to hunt the songbirds that nested there, to collect their eggs, or to chop the timber to use for building. But those who entered the forest were never heard from again, and it was said that a kind of lotus spell fell upon them and they wandered the forest eating berries and murmuring to themselves until they grew old and passed away, their hair and fingernails long and their clothes rotted away.&lt;/p&gt;

&lt;p&gt;Now the villagers kept well away from the forest, and Maude encountered nobody as she made her way to and into its leafy embrace.&lt;/p&gt;

&lt;h3 id=&quot;moses&quot;&gt;moses&lt;/h3&gt;

&lt;p&gt;Maude was not in the forest long before she noticed that it was an unusual forest. While there were many, many birds of all sorts flying here and there and singing noisily, she saw no large animal tracks or droppings or other signs that anything larger than a squirrel inhabited the floor of the forest.&lt;/p&gt;

&lt;p&gt;She walked along carefully, noting the many berries and fruiting trees. She wondered if these apparently edible treats contained some kind of opiate that induced insanity. Thinking it over, she decided not to eat anything just yet, so when she became hungry, she stopped, cleared some space, and made herself lunch with food she had packed.&lt;/p&gt;

&lt;p&gt;After lunch she made herself a coffee, and the aroma drifted out into the forest. She took a sip and was just abut to take another when she heard a bird’s call that sounded just like a human voice. She looked around, startled, but nobody was there, just a few birds pecking away at some breadcrumbs she had dropped.&lt;/p&gt;

&lt;p&gt;She took another sip and heard the voice again. Was she dreaming?&lt;/p&gt;

&lt;p&gt;She looked around carefully. Absolutely no people in any direction, just a few birds pecking at the earth. One had a particularly sparkling plumage and seemed larger than the others. It turned its head sideways, fixed her with its gaze, and opened its beak.&lt;/p&gt;

&lt;p&gt;“Hello,” it said.&lt;/p&gt;

&lt;p&gt;Maude nearly dropped her coffee. The bird had spoken to her! Then she gathered her wits. No, that was not possible. Far more likely, she reasoned, that it was parroting something that it had heard from a person. Or from another bird that heard it from a person. Maybe these bird had passed snippets of human speech down to each other through generations, like the parrots in &lt;a href=&quot;https://en.wikipedia.org/wiki/Red_Rackham's_Treasure&quot;&gt;a comic she enjoyed as a child&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;She smiled and decided to play along.&lt;/p&gt;

&lt;p&gt;“Hello, and how are you?”&lt;/p&gt;

&lt;p&gt;The bird said nothing for a moment, then opened its beak again:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hello, I am Moses. It sure is great to get out of my nest! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unaccustomed as I am to public speaking, I’d like to share with you a maxim I thought of the first time I met a mammal: Never trust a creature that can’t fly!&lt;sup id=&quot;fnref:mac&quot;&gt;&lt;a href=&quot;#fn:mac&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Maude stared, open-mouthed. Her brain felt like three people trying to squeeze through a doorway at the same time. One was the thought that she had somehow fallen under the spell of the forest and had gone mad. One was that this bird could talk and what a wondrous discovery she had made. And one was that she felt insulted that this gaudy popinjay had insulted her and she was eager to put it in its place.&lt;/p&gt;

&lt;p&gt;After a while, the third won out and she pursed her lips. She forgot altogether that this might be a dumb bird merely parroting things it had heard.&lt;/p&gt;

&lt;p&gt;“Well, Moses,” she replied, “You should get out of your forest and see the world. For there are mammals that can fly. Sugar gliders are mammals and they inhabit forests much like yours. And there are bats, they fly very well and have echolocation to boot.”&lt;/p&gt;

&lt;p&gt;Moses&lt;sup id=&quot;fnref:moses&quot;&gt;&lt;a href=&quot;#fn:moses&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; hopped for a moment and then spoke again. “Oh? I would be very interested to hear about the things outside of my forest. Tell me more.”&lt;/p&gt;

&lt;p&gt;Maude was amazed, but also curious. “I’d be delighted to tell you of things outside of your forest. But if we are to be friends, we must be equitable to each other. If I tell you of the world outside your forest, you must tell me about your forest so that we may both learn.”&lt;/p&gt;

&lt;p&gt;Moses considered. “Well that is very well with me,” he said somewhat formally, “Most of my friends would say that it is essential to drive a bargain with me to stop talking about my forest. I love it so and have spend my life studying it.”&lt;/p&gt;

&lt;p&gt;Maude, perhaps under the influence of the enchanted forest, or perhaps caught up in strange circumstances, listened as Moses began to speak.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/pepemichelle/3642644339/&quot; title=&quot;Magnificent Bird of Paradise by mpujals, on Flickr&quot;&gt;&lt;img src=&quot;http://farm3.staticflickr.com/2435/3642644339_742f2269f8_b.jpg&quot; alt=&quot;Magnificent Birds of Paradise&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;birds-of-paradise&quot;&gt;birds of paradise&lt;/h3&gt;

&lt;p&gt;“All of the birds in this forest have descended from a few common ancestors. We have evolved various differences to suit our micro-habitats and temperaments, but we share many common behaviours.&lt;/p&gt;

&lt;p&gt;“In our forest, we are quite safe from the kind of nasty predators you will find elsewhere, so we have had the opportunity to evolve in unique ways that have strengthened our social behaviours and intelligence. This is why our songs are more complex and beautiful than the songs you will hear from birds elsewhere.&lt;/p&gt;

&lt;p&gt;“And you will also find many other interesting things in our forest, such as birds that perform complex dances, birds that build and play with complex structures and machines. But to me, our very best birds combine a penetrating intellect with the delicate beauty of a magnificent plumage.&lt;/p&gt;

&lt;p&gt;“My main interest is in the songbirds in the forest. Each songbird, when it hears the song of some bird, will call back the song of another songbird. They are great mimics. A songbird’s personality can be defined once you understand its particular habit of responses to songs. The entire songbird society is governed by their responses to each other’s songs, and my lifelong study has been the  behaviour of songbirds.&lt;/p&gt;

&lt;p&gt;“I have discovered that there are rules and that the consequences of these rules lead to some deep and fascinating insights into the nature of thought itself. The brilliance of my discoveries is matched only by my plumage.”&lt;/p&gt;

&lt;p&gt;Maude thought Moses was just a little vain and didn’t like to be spoken down to, so she responded rather tersely. “I’m sure this is all very interesting, but your views do seem a little &lt;em&gt;egocentric&lt;/em&gt;.”&lt;/p&gt;

&lt;h3 id=&quot;egocentricity&quot;&gt;egocentricity&lt;/h3&gt;

&lt;p&gt;Many people would have been taken aback by such a forthright remark, but of course Moses was not a person. In fact, he was so assured of his own place as a star in the intellectual firmament that he seemed incapable of viewing a remark about himself as being critical.&lt;/p&gt;

&lt;p&gt;“Ah! Egocentricity is a very interesting subject touching upon fixation and the elusive family of Sage Birds. While I am, of course, conversant in these matters, the real expert in this area is The Magnificent Smullyan Bird.&lt;sup id=&quot;fnref:rs&quot;&gt;&lt;a href=&quot;#fn:rs&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; While his grey feathers are rather dowdy, his song brings to mind great piano performances.&lt;sup id=&quot;fnref:note&quot;&gt;&lt;a href=&quot;#fn:note&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;“I have been meaning to hear him sing for some time, let us go to his nest now, you will hear all about the significance of egocentric birds and I will enjoy his music.”&lt;/p&gt;

&lt;p&gt;Normally Maude would hesitate at such an abrupt suggestion, but as one does in dreams sometimes, she found herself walking through the forest with Moses without remembering exactly when she had agreed to go and in what direction she was walking.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Next: &lt;a href=&quot;./horton.html&quot;&gt;A Surreal Encounter with a Winged Elephant&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;notes:&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:maude&quot;&gt;
      &lt;p&gt;In memory of Lois Maude Barzey née Braithwaite, my grandmother, who overcame very difficult circumstances. And in honour of Clara Maude Braithwaite, who is as spunky as stereotypes would suggest for someone with a mop of red, curly hair.&lt;a href=&quot;#fnref:maude&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:mac&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=2B-XwPjn9YY&amp;amp;t=3m9s&quot;&gt;With loving nostalgia&lt;/a&gt;.&lt;a href=&quot;#fnref:mac&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:moses&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Moses_Schönfinkel&quot;&gt;Moses Schönfinkel&lt;/a&gt; was a Russian logician and mathematician, known for the invention of combinatory logic.&lt;a href=&quot;#fnref:moses&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:rs&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Raymond_Smullyan&quot;&gt;Raymond Merrill Smullyan&lt;/a&gt; is an American mathematician, concert pianist, logician, Taoist philosopher, and magician. He has his own &lt;a href=&quot;http://www.youtube.com/profile?user=rsmullyan&amp;amp;view=videos&quot;&gt;Youtube channel&lt;/a&gt;.&lt;a href=&quot;#fnref:rs&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:note&quot;&gt;
      &lt;p&gt;More about Raymond Smullyan, &lt;a href=&quot;http://mysite.verizon.net/vzeeaya7/raymondsmullyan/&quot;&gt;taken from the Piano Society and other sources&lt;/a&gt;.&lt;a href=&quot;#fnref:note&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>What's the difference between Currying and Partial Application?</title>
          <link>http://raganwald.com/2013/03/07/currying-and-partial-application.html</link>
          <pubDate>Thu, 07 Mar 2013 00:00:00 -0500</pubDate>
          <author>reg@braythwayt.com (Reginald Braithwaite)</author>
          <guid>http://raganwald.com/2013/03/07/currying-and-partial-application</guid>
          <description>&lt;p&gt;I was participating in &lt;a href=&quot;http://wrocloverb.com&quot;&gt;wroc_love.rb&lt;/a&gt; last week-end, and &lt;a href=&quot;http://steveklabnik.com&quot;&gt;Steve Klabnik&lt;/a&gt; put up a slide mentioning &lt;a href=&quot;https://en.wikipedia.org/wiki/Partial_application&quot;&gt;partial application&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Currying&quot;&gt;currying&lt;/a&gt;. “The difference between them is not important right now,” he said, pressing on. And it wasn’t.&lt;/p&gt;

&lt;p&gt;But here we are, it’s a brand new day, and we’ve already read five different explanations of &lt;code&gt;this&lt;/code&gt; and closures this week, but only three or four about currying, so let’s get into it.&lt;/p&gt;

&lt;h3 id=&quot;arity&quot;&gt;arity&lt;/h3&gt;

&lt;p&gt;Before we jump in, let’s get some terminology straight. Functions have &lt;em&gt;arity&lt;/em&gt;, meaning the number of arguments they accept. A “unary” function accepts one argument, a “polyadic” function takes more than one argument. There are specialized terms we can use: A “binary” function accepts two, a “ternary” function accepts three, and you can rustle about with greek or latin words and invent names for functions that accept more than three arguments.&lt;/p&gt;

&lt;p&gt;Some functions accept a variable number of arguments, we call them &lt;em&gt;variadic&lt;/em&gt;, although variadic functions and functions taking no arguments aren’t our primary focus in this essay.&lt;/p&gt;

&lt;h3 id=&quot;partial-application&quot;&gt;partial application&lt;/h3&gt;

&lt;p&gt;Partial application is straightforward. We could start with addition or some such completely trivial example, but if you don’t mind we’ll have a look at something from the &lt;a href=&quot;http://allong.es&quot;&gt;allong.es&lt;/a&gt; JavaScript library that is of actual use in daily programming.&lt;/p&gt;

&lt;p&gt;As a preamble, let’s make ourselves a &lt;code&gt;map&lt;/code&gt; function that maps another function over a list:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; [1, 4, 9]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;map&lt;/code&gt; is obviously a binary function, &lt;code&gt;square&lt;/code&gt; is a unary function. When we called &lt;code&gt;map&lt;/code&gt; with arguments &lt;code&gt;[1, 2, 3]&lt;/code&gt; and &lt;code&gt;square&lt;/code&gt;, we &lt;em&gt;applied&lt;/em&gt; the arguments to the function and got our result.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;map&lt;/code&gt; takes two arguments, and we supplied two arguments, we &lt;em&gt;fully applied&lt;/em&gt; the arguments to the function. So what’s partial application? Supplying fewer arguments. Like supplying one argument to &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now what happens if we supply one argument to &lt;code&gt;map&lt;/code&gt;? We can’t get a result without the other argument, so what we get back is a unary function that takes the other argument and produces the result we want.&lt;/p&gt;

&lt;p&gt;If we’re going to apply one argument to &lt;code&gt;map&lt;/code&gt;, let’s make it the &lt;code&gt;unaryFn&lt;/code&gt;. We’ll start with the end result and work backwards. First thing we do, is set up a wrapper around map:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapWrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next we’ll break our binary wrapper function into two nested unary functions:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapWrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can supply our arguments one at a time:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;mapWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; [1, 4, 9]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Instead of a binary &lt;code&gt;map&lt;/code&gt; function that returns our result, we now have a unary function that returns a unary function that returns our result. So where’s the partial application? Let’s get our hands on the second unary function:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;squareAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; [function]&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;squareAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; [1, 4, 9]&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;squareAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; [25, 49, 25]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We’ve just partially applied the value &lt;code&gt;square&lt;/code&gt; to the function &lt;code&gt;map&lt;/code&gt;. We got back a unary function, &lt;code&gt;squareAll&lt;/code&gt;, that we could use as we liked. Partially applying &lt;code&gt;map&lt;/code&gt; in this fashion is handy, so much so that the &lt;a href=&quot;http://allong.es&quot;&gt;allong.es&lt;/a&gt; library includes a function called &lt;code&gt;splat&lt;/code&gt; that does this exact thing.&lt;/p&gt;

&lt;p&gt;If we had to physically write ourselves a wrapper function every time we want to do some partial application, we’d never bother. Being programmers though, we can automate this. There are two ways to do it.&lt;/p&gt;

&lt;h3 id=&quot;currying&quot;&gt;currying&lt;/h3&gt;

&lt;p&gt;First up, we can write a function that returns a wrapper function. Sticking with binary function, we start with this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Rename &lt;code&gt;map&lt;/code&gt; and the two arguments:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secondArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;binaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secondArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And now we can wrap the whole thing in a function that takes &lt;code&gt;binaryFn&lt;/code&gt; as an argument:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rightmostCurry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;binaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secondArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;binaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secondArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So now we’ve ‘abstracted’ our little pattern. We can use it like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rightmostCurriedMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rightmostCurry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;squareAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rightmostCurriedMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;squareAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; [1, 4, 9]&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;squareAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; [25, 49, 25]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Converting a polyadic function into a nested series of unary functions is called &lt;strong&gt;currying&lt;/strong&gt;, after Haskell Curry, who popularized the technique. He actually rediscovered the combinatory logic work of &lt;a href=&quot;https://en.wikipedia.org/wiki/Moses_Schönfinkel&quot;&gt;Moses Schönfinkel&lt;/a&gt;, so we could easily call it “schönfinkeling.”&lt;sup id=&quot;fnref:birds&quot;&gt;&lt;a href=&quot;#fn:birds&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;rightmostCurry&lt;/code&gt; function curries any binary function into a chain of unary functions starting with the second argument. This is a “rightmost” curry because it starts at the right.&lt;/p&gt;

&lt;p&gt;The opposite order would be a “leftmost” curry. Most logicians work with leftmost currying, so when we write a leftmost curry, most people just call it “curry:”&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;binaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secondArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;binaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secondArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curriedMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oneToThreeEach&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curriedMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;oneToThreeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; [1, 4, 9]&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;oneToThreeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; [2, 4, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When would you use a regular curry and when would you use a rightmost curry? It really depends on your usage. In our binary function example, we’re emulating a kind of subject-object grammar. The first argument we want to use is going to be the subject, the second is going to be the object.&lt;/p&gt;

&lt;p&gt;So when we use a rightmost curry on &lt;code&gt;map&lt;/code&gt;, we are setting up a “sentence” that makes the mapping function the subject.&lt;/p&gt;

&lt;p&gt;So we read &lt;code&gt;squareAll([1, 2, 3])&lt;/code&gt; as “square all the elements of the array [1, 2, 3].” By using a rightmost curry, we made “squaring” the subject and the list the object. Whereas when we used a regular curry, the list became the subject and the mapper function became the object.&lt;/p&gt;

&lt;p&gt;Another way to look at it that is a little more like “patterns and programming” is to think about what you want to name and/or reuse. Having both kinds of currying lets you name and/or reuse either the mapping function or the list.&lt;/p&gt;

&lt;h3 id=&quot;partial-application-1&quot;&gt;partial application&lt;/h3&gt;

&lt;p&gt;So many words about currying! What about “partial application?” Well, if you have currying you don’t need partial application. And conversely, if you have partial application you don’t need currying. So when you write this kind of essay, it’s easy to spend a lot of words describing one of these two things and then explain everything else on top of what you already have.&lt;/p&gt;

&lt;p&gt;Let’s look at our rightmost curry again:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rightmostCurry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;binaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secondArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;binaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secondArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You might find yourself writing code like this over and over again:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;squareAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rightmostCurry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;doubleAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rightmostCurry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This business of making a rightmost curry and then immediately applying an argument to it is extremely common, and when something’s common we humans like to name it. And it has a name, it’s called a &lt;em&gt;rightmost unary partial application of the map function&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What a mouthful. Let’s take it step by step:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;rightmost: From the right.&lt;/li&gt;
  &lt;li&gt;unary: One argument.&lt;/li&gt;
  &lt;li&gt;partial application: Not applying all of the arguments.&lt;/li&gt;
  &lt;li&gt;map: To the map function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So what we’re really doing is applying one argument to the map function. It’s a binary function, so that means what we’re left with is a unary function. Again, functional languages and libraries almost always include a first-class function to do this for us.&lt;/p&gt;

&lt;p&gt;We &lt;em&gt;could&lt;/em&gt; build one out of a rightmost curry:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rightmostUnaryPartialApplication&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;binaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secondArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rightmostCurry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;binaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secondArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However it is usually implemented in more direct fashion:&lt;sup id=&quot;fnref:caveat&quot;&gt;&lt;a href=&quot;#fn:caveat&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rightmostUnaryPartialApplication&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;binaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secondArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;binaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secondArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;rightmostUnaryPartialApplication&lt;/code&gt; is a bit much, so we’ll alias it &lt;code&gt;applyLast&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applyLast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rightmostUnaryPartialApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here’re our &lt;code&gt;squareAll&lt;/code&gt; and &lt;code&gt;doubleAll&lt;/code&gt; functions built with &lt;code&gt;applyLast&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;squareAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applyLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;doubleAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applyLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also make an &lt;code&gt;applyFirst&lt;/code&gt; function (we’ll skip calling it “leftmostUnaryPartialApplication”):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applyFirst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;binaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secondArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;binaryFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secondArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As with leftmost and rightmost currying, you want to have both in your toolbox so that you can choose what you are naming and/or reusing.&lt;/p&gt;

&lt;h3 id=&quot;so-whats-the-difference-between-currying-and-partial-application&quot;&gt;so what’s the difference between currying and partial application?&lt;/h3&gt;

&lt;p&gt;“Currying is the decomposition of a polyadic function into a chain of nested unary functions. Thus decomposed, you can partially apply one or more arguments,&lt;sup id=&quot;fnref:also&quot;&gt;&lt;a href=&quot;#fn:also&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; although the curry operation itself does not apply any arguments to the function.”&lt;/p&gt;

&lt;p&gt;“Partial application is the conversion of a polyadic function into a function taking fewer arguments arguments by providing one or more arguments in advance.”&lt;/p&gt;

&lt;h3 id=&quot;is-that-all-there-is&quot;&gt;is that all there is?&lt;/h3&gt;

&lt;p&gt;Yes. And no. Here are some further directions to explore on your own:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We saw how to use currying to implement partial application. Is it possible to use partial application to implement currying? Why? Why not?&lt;sup id=&quot;fnref:tao&quot;&gt;&lt;a href=&quot;#fn:tao&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;All of our examples of partial application have concerned converting binary functions into unary functions by providing one argument. Write more general versions of &lt;code&gt;applyFirst&lt;/code&gt; and &lt;code&gt;applyLast&lt;/code&gt; that provide one argument to any polyadic function. For example, if you have a function that takes four arguments, &lt;code&gt;applyFirst&lt;/code&gt; should return a function taking three arguments.&lt;/li&gt;
  &lt;li&gt;When you have &lt;code&gt;applyFirst&lt;/code&gt; and &lt;code&gt;applyLast&lt;/code&gt; working with all polyadic functions, try implementing &lt;code&gt;applyLeft&lt;/code&gt; and &lt;code&gt;applyRight&lt;/code&gt;: &lt;code&gt;applyLeft&lt;/code&gt; takes a polyadic function and one &lt;em&gt;or more&lt;/em&gt; arguments and leftmost partially applies them. So if you provide it with a ternary function and two arguments, it should return a unary function. &lt;code&gt;applyRight&lt;/code&gt; does the same with rightmost application.&lt;/li&gt;
  &lt;li&gt;Rewrite curry and rightmostCurry to accept any polyadic function. So just as a binary function curries into two nested unary functions, a ternary function should curry into three nested unary functions and so on.&lt;/li&gt;
  &lt;li&gt;Review the source code for &lt;a href=&quot;http://allong.es&quot;&gt;allong.es&lt;/a&gt;, the functional programming library extracted from &lt;a href=&quot;http://leanpub.com/javascript-allonge&quot;&gt;JavaScript Allongé&lt;/a&gt;, especially &lt;a href=&quot;https://github.com/raganwald/allong.es/blob/master/lib/partial_application.js&quot;&gt;partial_application.js&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks for reading, if you discover a bug in the code, please either &lt;a href=&quot;https://github.com/raganwald/raganwald.github.com&quot;&gt;fork the repo&lt;/a&gt; and submit a pull request, or &lt;a href=&quot;https://github.com/raganwald/raganwald.github.com/issues&quot;&gt;submit an issue on Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;p.s. Another essay you might find interesting: &lt;a href=&quot;http://raganwald.com/2013/01/05/practical-applications-of-partial-application.html&quot;&gt;Practical Applications of Partial Application&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;http://www.reddit.com/r/javascript/comments/19urej/whats_the_difference_between_currying_and_partial/&quot;&gt;discuss&lt;/a&gt;)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;notes:&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:birds&quot;&gt;
      &lt;p&gt;When Raymond Smullyan wrote his seminal introduction to combinatory logic, he called it “To Mock a Mockingbird” and used forests of birds as his central metaphor to pay tribute to Schönfinkel. Schön means “beautiful” and Fink means “finch” in German, although Finkl may be Yiddish for “sparkle.” So his name may mean “beautiful finch,” or it may mean “beautiful sparkle.”&lt;a href=&quot;#fnref:birds&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:caveat&quot;&gt;
      &lt;p&gt;All of our implementations are grossly simplified. Full implementations can handle polyadic functions with more than two arguments and are context-agnostic.&lt;a href=&quot;#fnref:caveat&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:also&quot;&gt;
      &lt;p&gt;There are a lot of other reasons to curry functions, but this is an article about the relationship between currying and partial application, not an introduction to combinatory logic and functional programming :-)&lt;a href=&quot;#fnref:also&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:tao&quot;&gt;
      &lt;p&gt;A Taoist ordered a vegetarian hot dog from a street vendor: “Make me one with everything,” he requested politely.&lt;a href=&quot;#fnref:tao&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Two Brief Points About CoffeeScript 1.5</title>
          <link>http://raganwald.com/2013/02/27/literate-coffeescript.litcoffee.html</link>
          <pubDate>Wed, 27 Feb 2013 00:00:00 -0500</pubDate>
          <author>reg@braythwayt.com (Reginald Braithwaite)</author>
          <guid>http://raganwald.com/2013/02/27/literate-coffeescript.litcoffee</guid>
          <description>&lt;h3 id=&quot;first-constructors-must-return-their-instance&quot;&gt;first, constructors must return their instance&lt;/h3&gt;

&lt;p&gt;Jeremy Ashkenas recently announced that CoffeeScript 1.5 is out. One of its changes concerns constructors created with CoffeeScript’s &lt;code&gt;class&lt;/code&gt; keyword. It used to be possible to write this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;###
class Weird
  constructor: -&amp;gt;
    return { exclamation: &quot;That's Strange&quot; }
###
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And when you wrote &lt;code&gt;new Weird()&lt;/code&gt;, you’d get a plain object, not an instance of &lt;code&gt;Weird&lt;/code&gt;. This is no longer the case. Now when you write the above, you get an error: &lt;em&gt;CANNOT RETURN A VALUE FROM A CONSTRUCTOR: “{ EXCLAMATION: “THAT’S STRANGE” }” IN CLASS WEIRD&lt;/em&gt;. Does this matter? Only in edge cases. in &lt;a href=&quot;http://leanpub.com/javascript-allonge&quot;&gt;JavaScript Allongé&lt;/a&gt;, I borrowed a pattern from &lt;a href=&quot;http://effectivejs.com&quot;&gt;Effective JavaScript&lt;/a&gt;. Here’s the use case. Consider this constructor with a variable number of arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Contact
  constructor: (@name, @emails...) -&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can write things like &lt;code&gt;new Contact('raganwald', 'reg@braythwayt.com', 'reg@raganwald.com')&lt;/code&gt;. Good. Now: How do we call this programmatically if we have an array of contacts? Don’t say “Use&lt;code&gt;.apply&lt;/code&gt;,” that doesn’t work for constructors, just for normal functions. So we have to rewrite its signature. Or do we?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;###
class Contact
  constructor: (@name, @emails...) -&amp;gt;
    self = if this instanceof Contact then this else new Contact()
    self.name = name
    self.emails = emails
    return self
  doSomething: -&amp;gt;
    # ...
  doSomethingElse: -&amp;gt;
    # ...
###
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, whenever we wanted to use &lt;code&gt;.apply&lt;/code&gt;, we could:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;### 
testArray = ['raganwald', 'reg@braythwayt.com', 'reg@raganwald.com']
  
Contact.apply(null, testArray)
  #=&amp;gt; returns a new contact record
###
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other benefits would include being able to use combinators on constructors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;###
class Router
  constructor: (something, somethingElse) -&amp;gt;
    self = if this instanceof Contact then this else new Contact()
    self.something = something
    self.somethingElse = somethingElse
    return self

SingletonRouter = once(Router)
###
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, we’re not going to be able to do that any more. It’s not a huge deal, there are other ways to work around these infrequent use cases, and overall the benefit of having constructors constrained to always return the instance is likely to far outweigh the lack of flexibility.&lt;/p&gt;

&lt;h3 id=&quot;working-around-the-change&quot;&gt;working around the change&lt;/h3&gt;

&lt;p&gt;You can work around this issue very easily. CoffeeScript doesn’t stop you from writing a JavaScript-style class, so you can simply write your constructor function directly, eschewing the convenience of the &lt;code&gt;class&lt;/code&gt; keyword:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Contact = (@name, @emails...) -&amp;gt;
  self = if this instanceof Contact then this else new Contact()
  self.name = name
  self.emails = emails
  return self
Contact::doSomething = -&amp;gt;
  # ...
Contact::doSomethingElse = -&amp;gt;
  # ...
  
console.log new Contact('raganwald', 'reg@braythwayt.com', 'reg@raganwald.com')
  #=&amp;gt; { name: 'raganwald',
  #     emails: 
  #     [ 'reg@braythwayt.com', 'reg@raganwald.com' ] }

testArray = ['raganwald', 'reg@braythwayt.com', 'reg@raganwald.com']
  
Contact.apply(null, testArray)
  #=&amp;gt; { name: 'raganwald',
  #     emails: 
  #     [ 'reg@braythwayt.com', 'reg@raganwald.com' ] }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;second-literate-coffeescript&quot;&gt;second, literate coffeescript&lt;/h3&gt;

&lt;p&gt;The other news, and yes I’ve buried the lede by leaving it for last, is that CoffeeScript now supports a “literate” mode. Here’s what Jeremy has to say:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Besides being used as an ordinary programming language, CoffeeScript may also be written in “literate” mode. If you name your file with a  .litcoffee extension, you can write it as a Markdown document — a document that also happens to be executable CoffeeScript code. The compiler will treat any indented blocks (Markdown’s way of indicating source code) as code, and ignore the rest as comments.”&lt;/p&gt;

  &lt;p&gt;“Just for kicks, a little bit of the compiler is currently implemented in this fashion: See it as a document, raw, and properly highlighted in a text editor.”&lt;/p&gt;

  &lt;p&gt;“I’m fairly excited about this direction for the language, and am looking forward to writing (and more importantly, reading) more programs in this style. As 1.5.0 is the first version of CoffeeScript that supports it, let us know if you have any ideas for improving the feature.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Does it work? It certainly does, and I have a very powerful use case for it. This blog post was written as a literate CoffeeScript document, so I was able to run it by typing &lt;code&gt;coffee 2013-02-27-literate-coffeescript.litcoffee&lt;/code&gt; on the command line.&lt;/p&gt;

&lt;p&gt;For the moment, Jekyll insists on parsing  &lt;code&gt;.litcoffee&lt;/code&gt; files as text, so whenever I want to write about CoffeeScript, I need to add a &lt;code&gt;.md&lt;/code&gt; to the suffix before pushing to the server. But that’s still much better than error-prone cutting and pasting of snippets, and in the fullness of time I hope that CoffeeScript will recognize &lt;code&gt;.coffee.md&lt;/code&gt; as &lt;a href=&quot;https://github.com/jashkenas/coffee-script/issues/2736&quot;&gt;Literate CoffeeScript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That’s going to be a big time saver.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Implementing the Sieve of Eratosthenes with Functional Programming</title>
          <link>http://raganwald.com/2013/02/23/sieve.html</link>
          <pubDate>Sat, 23 Feb 2013 00:00:00 -0500</pubDate>
          <author>reg@braythwayt.com (Reginald Braithwaite)</author>
          <guid>http://raganwald.com/2013/02/23/sieve</guid>
          <description>&lt;p&gt;Programming interviews often include a “Fizzbuzz” test, some simple programming task that is intended to establish that the candidate can, in fact, program something trivial. It isn’t intended as a deep architectural dive or as an algorithms challenge. Under ideal, non-pressure situations it shouldn’t take more than fifteen minutes to complete.&lt;/p&gt;

&lt;p&gt;One common exercise is to print out some prime numbers, perhaps a hundred or a thousand. We’ll write a JavaScript program to do that, and we’ll implement the well-known Sieve of Eratosthenes algorithm.&lt;/p&gt;

&lt;h3 id=&quot;functional-iterators&quot;&gt;functional iterators&lt;/h3&gt;

&lt;p&gt;Our approach will rest on &lt;em&gt;functional iterators&lt;/em&gt;, stateful functions that you call over and over again to get values. Functional iterators return &lt;code&gt;undefined&lt;/code&gt; if and when they have no more values to provide. Functional iterators are handy for two reasons: They decouple the mechanism of iterating over a data structure from what you do with its values, and they are also handy for dealing with data structures that may be so large as to be unwieldy, including infinitely large data sets.&lt;/p&gt;

&lt;p&gt;To implement our Sieve of Eratosthenes, we’re going to use a few of the tools provided by &lt;a href=&quot;http://allong.es&quot; title=&quot;JavaScript Recipes from JavaScript Allongé&quot;&gt;allong.es&lt;/a&gt;, the JavaScript Function Utility Belt. Let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;unfolding&quot;&gt;unfolding&lt;/h3&gt;

&lt;p&gt;All implementations of the Sieve rest on filtering numbers that are divisible by any smaller prime number. To be true to the spirit of the Sieve, you must emulate the behaviour of filtering all of the numbers going forward, not iterating forward and checking each number against a list of primes.&lt;/p&gt;

&lt;p&gt;So the first thing we’ll need is a collection of natural numbers. Since we don’t know how many numbers we’ll need, we might as well start with all of the numbers from two upwards. That’s very easy to write as an iterator:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NumbersFromTwo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NumbersFromTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 3&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, we have a stateful function that returns &lt;code&gt;2&lt;/code&gt; the first time you call it, and thereafter returns the next largest natural number.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;NumbersFromTwo&lt;/code&gt; is a specific case of a very general pattern: Starting with a seed, generate an iteration where each value generated is calculated by applying a function to the previous value. When you start with a list, collection, or iteration and “reduce” it to a value, computer scientists call that a “fold.” And the reverse operation, its dual, is called an “unfold.”&lt;/p&gt;

&lt;p&gt;For a very simple case like this, we don’t really need to be explicit about our unfolding, but for the sake of seeing how things work, let’s use a helper function from the &lt;a href=&quot;http://allong.es&quot; title=&quot;JavaScript Recipes from JavaScript Allongé&quot;&gt;allong.es&lt;/a&gt; library and rewrite it as an unfold:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unfold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;allong.es&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unfold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unfold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 3&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;unfold&lt;/code&gt; returns an iterator. The first time you call the iterator, it returns the seed. Thereafter, it applies the function to the previous value to determine the next value to return. It may not seem like much of a win for a very short function, but making an unfold explicit like this also makes it easier to reason about the iterator than if you wrote a stateful function by hand.&lt;/p&gt;

&lt;p&gt;Now we have a function that iterates over the natural numbers starting with 2. How would we “sieve” it?&lt;/p&gt;

&lt;h3 id=&quot;accumulate-with-return&quot;&gt;accumulate with return&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&quot;http://raganwald.com/2013/02/17/a-drunken-walk.html&quot;&gt;The Drunken Walk Programming problem&lt;/a&gt;, we were introduced to the &lt;code&gt;accumulate&lt;/code&gt; function. It works a lot like a fold, reduce, or inject method: It iterates over a collection, accumulating a state along the way. The special sauce in &lt;code&gt;accumulate&lt;/code&gt; is that instead of waiting for the end of the collection and returning a single value, &lt;code&gt;accumulate&lt;/code&gt; returns an iterator that iterates over the state value as it iterates over the list. For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accumulate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;allong.es&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accumulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;FlatArrayIterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;allong.es&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FlatArrayIterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accumulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FlatArrayIterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 3&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 6&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 10&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Instead of returning the sum of the array as a single value, this iterator created with &lt;code&gt;accumulate&lt;/code&gt; iterates over the running total.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;accumulate&lt;/code&gt; is a terrific tool, but it does conflate the state with the value returned. Thus, you often find yourself writing a map from the accumulated state to the values you want. In some cases this can be either expensive or unclear, so &lt;a href=&quot;http://allong.es&quot; title=&quot;JavaScript Recipes from JavaScript Allongé&quot;&gt;allong.es&lt;/a&gt; provides a function that separates the concerns of accumulating state from generating values.&lt;/p&gt;

&lt;p&gt;Here’s a ridiculous “square of the running total” example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accumulateWithReturn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;allong.es&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accumulateWithReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;FlatArrayIterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;allong.es&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FlatArrayIterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accumulateWithReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FlatArrayIterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 9&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 36&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 100&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 225&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;accumulateWithReturn&lt;/code&gt; takes a function that returns &lt;em&gt;two&lt;/em&gt; values as an array. The first is the state for the next iteration, the second is the value to return for that iteration. So how does that help?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif&quot; alt=&quot;Animated Sieve of Eratosthenes&quot; /&gt;&lt;br /&gt;
&lt;em&gt;Illustrated Sieve from &lt;a href=&quot;https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes&quot;&gt;Wikipedia&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;sieving-numbers&quot;&gt;sieving numbers&lt;/h3&gt;

&lt;p&gt;Let’s consider what we want to do to “sieve” all the multiples of a number from the natural numbers. Essentially, we want to count as we go along. If our number is “5,” we count 1, 2, 3, 4, “stroke out!” 1, 2, 3, 4, “stroke out!” We could also choose to count &lt;em&gt;down&lt;/em&gt;, as in 5, 4, 3, 2, “stroke out!” 5, 4, 3, 2, “stroke out!” We’ll go with counting down,although you’re welcome to rewrite it counting up and see that we get the same results.&lt;/p&gt;

&lt;p&gt;Thus, we want to maintain a counter as we iterate through the numbers. But what do we want to return? If the counter is greater than one, we return the number. But if our counter reaches one, we return some special flag indicating we’ve stroked the number our and reset our count to our number.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Obviously, this could be much easier: We can take the modulus of the number directly with a simple &lt;code&gt;map&lt;/code&gt;. But that isn’t the &lt;em&gt;literal&lt;/em&gt; Sieve of Eratosthenes. And gosh-diddley-honest, we are going to implement this algorithm literally.&lt;/p&gt;

  &lt;p&gt;For more on what makes an algorithm a genuine Sieve of Eratosthenes, Melissa O’Neill has written a terrific paper: &lt;a href=&quot;http://www.cs.tufts.edu/%7Enr/comp150fp/archive/melissa-oneill/Sieve-JFP.pdf&quot;&gt;The Genuine Sieve of Eratosthenes&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here we are. We’ll use &lt;code&gt;false&lt;/code&gt; as our value for numbers being stroked out:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accumulateWithReturn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;allong.es&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accumulateWithReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;unfold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;allong.es&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unfold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SieveMultiplesOf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accumulateWithReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbersFromOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unfold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SieveMultiplesOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbersFromOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 4&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 5&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that we can sieve an already sieved iteration:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbersFromOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unfold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sieveThrees&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SieveMultiplesOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbersFromOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SieveMultiplesOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sieveThrees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 4&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 7&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 8&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We’re just about ready!&lt;/p&gt;

&lt;h3 id=&quot;the-final-step&quot;&gt;the final step&lt;/h3&gt;

&lt;p&gt;With an unfold, we start with a seed and transform it with every iteration into the next value to be returned. That, in a nutshell, is what we’re going to do with an iteration over the numbers from two: transform it with every iteration by sieving it.&lt;/p&gt;

&lt;p&gt;So we expect to see something like this in the middle of our code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;remainingNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SieveMultiplesOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remainingNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextPrimeNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, we don’t actually want to return the sieved numbers with each iteration, we want to return each prime. So we need an unfold that separates state from the return value. Hmmm. &lt;code&gt;accumulateWithReturn&lt;/code&gt; is just like &lt;code&gt;accumulate&lt;/code&gt;, only it separates state from return value. Could it be that &lt;code&gt;unfoldWithReturn&lt;/code&gt; is just like unfold but separates state from return value?&lt;/p&gt;

&lt;p&gt;Yes: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unfoldWithReturn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;allong.es&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unfoldWithReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;allong.es&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PrimeNumbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbersFromTwo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unfold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unfoldWithReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbersFromTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remainingNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextPrimeNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remainingNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;remainingNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SieveMultiplesOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remainingNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextPrimeNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remainingNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextPrimeNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PrimeNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 3&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 5&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 7&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our algorithm takes advantage of the fact that &lt;code&gt;find&lt;/code&gt; from &lt;a href=&quot;http://allong.es&quot; title=&quot;JavaScript Recipes from JavaScript Allongé&quot;&gt;allong.es&lt;/a&gt; calls the iterator until a value matches the predicate function. It will thus skip over all of the &lt;code&gt;false&lt;/code&gt; values representing multiples that have been crossed out.&lt;/p&gt;

&lt;p&gt;The first number not crossed out is always the next prime to return. So, we return the new state consisting of the remaining numbers with multiples of the new prime number crossed out, and the new prime number as our return value.&lt;/p&gt;

&lt;h3 id=&quot;the-complete-solution&quot;&gt;the complete solution&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;I&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;allong.es&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;accumulateWithReturn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accumulateWithReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;unfold&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unfold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;unfoldWithReturn&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unfoldWithReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;take&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PrimeNumbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbersFromTwo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unfold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SieveMultiplesOf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accumulateWithReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unfoldWithReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbersFromTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remainingNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextPrimeNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remainingNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;remainingNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SieveMultiplesOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remainingNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextPrimeNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remainingNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextPrimeNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first100primes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PrimeNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first100primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 2, 3, 5, ..., 7901, 7907, 7919&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The source code for the utility functions we’re using can all be reviewed online in &lt;a href=&quot;https://github.com/raganwald/allong.es/blob/master/lib/iterators.js&quot; title=&quot;iterators.js on github&quot;&gt;iterators.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;http://www.reddit.com/r/javascript/comments/196zit/implementing_the_sieve_of_eratosthenes_with/&quot;&gt;discuss&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;bonus&quot;&gt;bonus&lt;/h3&gt;

&lt;p&gt;Eratosthenes actually advocated an optimization of this algorithm. I left it out initially because it changes &lt;code&gt;SieveMultiplesOf&lt;/code&gt; in such a way that it isn’t as easy to verify its behaviour separately because it’s coupled to the way numbers are taken off the front of the iterators:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SieveMultiplesOf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accumulateWithReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aPrime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aPrime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;post-script&quot;&gt;post script&lt;/h3&gt;

&lt;p&gt;I actually failed that particular interview test when I took it. I can’t tell you why, it was “Just one of those days,” I guess. But I’ve never forgotten the fact that no matter how simple the test, interviews are high-pressure situations where anyone can “choke.” Well, maybe not anyone. But I certainly can.&lt;/p&gt;

</description>
        </item>
      
    
      
        <item>
          <title>Hilbert's School Closed for Discriminatory Practices</title>
          <link>http://raganwald.com/2013/02/22/breaking-news-programming-school-closed.html</link>
          <pubDate>Fri, 22 Feb 2013 00:00:00 -0500</pubDate>
          <author>reg@braythwayt.com (Reginald Braithwaite)</author>
          <guid>http://raganwald.com/2013/02/22/breaking-news-programming-school-closed</guid>
          <description>&lt;p&gt;Much has been made of the lack of diversity in the technology field. While there are many causes for it and not all of the factors represent intentional or even systemic discrimination, there are from time to time disturbing incidents that make me despair. One such has just been revealed to me, and I am proud to be the one with the scoop.&lt;/p&gt;

&lt;p&gt;You read here about &lt;a href=&quot;http://raganwald.com/2013/02/21/hilberts-school.html&quot;&gt;Hilbert’s Grand JavaScript School&lt;/a&gt;. After a stunningly successful first week offering its revolutionary &lt;em&gt;Learn javaScript in Five Days&lt;/em&gt; course, authorities in Thailand have closed it for failing to offer seating on a fair and equitable basis.&lt;/p&gt;

&lt;p&gt;Operator Dr. Hilbert “Bertie” David protested that he accepted an infinite number of students and was able to accommodate an additional one million, infinity, infinity times infinity, and infinity cubed students on successive days, so clearly his school was incapable of denying education to anyone.&lt;/p&gt;

&lt;p&gt;Prosecuting Justice the Honourable Georgina “Can’t-Be-Deterred” Orr disputed his claims and allowed reporters to interview what appeared to be an infinite number of women, people of colour, older programmers, and programmers who failed to meet minimal hipster standards who were denied seats using Dr. David’s methods.&lt;/p&gt;

&lt;h3 id=&quot;the-case-for-the-prosecution&quot;&gt;the case for the prosecution&lt;/h3&gt;

&lt;p&gt;“The entire thing is a fraud,” Ms Orr proclaimed, “It is an illusion of equal access masking the same old tired privilege and discrimination. We will show in court that Dr. David pretended to provide access to all but secretly blocked entire classes of applicants by assigning them student IDs that would never be assigned to seats, not even given an infinite amount of time to operate his &lt;a href=&quot;http://raganwald.com/2013/02/21/hilberts-school.html&quot;&gt;algorithms&lt;/a&gt;.”&lt;/p&gt;

&lt;p&gt;“And this was not just some smattering of minorities being denied. We will show that the number of candidates being denied was not only larger than the infinite number of candidates seated in his course, it was larger than can be counted using any method prior to certain techniques developed for this investigation and prosecution.”&lt;/p&gt;

&lt;p&gt;A reporter asked for an example, and Ms Orr was ready with charts and diagrams to explain.&lt;/p&gt;

&lt;p&gt;“Although he covered up his fraudulent behaviour with JavaScript Mumbo-Jumbo, all of his seat assignments boiled down to putting the students he accepted into a one-to-one correspondence with the numbers on his seats. His defence rests on the proposition that given an infinite number of students, there is always a method of putting them into a one-to-one correspondence with the natural numbers, and thus he is accommodating all students regardless of background..”&lt;/p&gt;

&lt;p&gt;“We will prove that to the contrary, his plan did &lt;em&gt;not&lt;/em&gt; accommodate all students, and worse, that only a small minority of students were assigned seats while an extremely large number, much larger than his so-called infinity, were left without access to education.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/infinity.png&quot; alt=&quot;Infinity&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;exhibit-one&quot;&gt;exhibit one&lt;/h3&gt;

&lt;p&gt;“Exhibit one in our prosecution are the Bus Mechanics.”&lt;/p&gt;

&lt;p&gt;“As you know, on Day Four, Reddit hired an infinite number of buses, each of which held an infinite number of Redditors. The buses came from Zero To Infinity Bus Lines. This is a union shop, and we spoke with Mike, the Shop Steward. He told us that the Maintenance Workers have negotiated a strict schedule with management. Each worker works on a different bus every day, and no two workers work the buses in the same order. In fact, there’s one worker for every possible schedule of buses, that’s a contractual requirement.”&lt;/p&gt;

&lt;p&gt;“After preparing the buses for the Reddit Trip, the Mike and the Mechanics attempted to attend the JavaScript School and were unable to be seated. Dr. David claims he is able to accommodate everyone, but in fact he only has room for a very small fraction of the people seeking education and he discriminates against disadvantaged groups like Mike and the Mechanics.”&lt;/p&gt;

&lt;h3 id=&quot;the-defence&quot;&gt;the defence&lt;/h3&gt;

&lt;p&gt;“In his defence, he will claim he seated them all somewhere in his auditorium. If that is true, we can number the seats they occupied from zero up, something like this:”&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;M.0 - Some mechanic
M.1 - Another mechanic
M.2 - A third mechanic
M.3 - The fourth mechanic

...

M.infinity
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“It doesn’t matter how he chose to seat them or where, if they are all in his auditorium occupying seats that have numbers on them, we can order them and assign them numbers of our own from zero. He claims that every mechanic can be seated. We will prove this is impossible.”&lt;/p&gt;

&lt;h3 id=&quot;the-crucial-evidence&quot;&gt;the crucial evidence&lt;/h3&gt;

&lt;p&gt;We will call to the stand a mechanic turned away. We will select this mechanic as follows. Every mechanic has a unique schedule of buses. Here’s one possible arrangement:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;M.0 - Bus 0, Bus 1, Bus 42, Bus 6, Bus 97, ..., 19
M.1 - Bus 0, Bus 1, Bus 42, Bus 6, Bus 95, ..., 1337
M.2 - Bus 42, Bus 6, Bus 3, Bus 9, Bus 11, ..., 1000000
M.3 - Bus 5, Bus 4, Bus 2, Bus 10, Bus 99, ..., 12

...

M.infinity - Bus 2, Bus 3, Bus 5, Bus 7, Bus 11, ..., 42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We call the number of the seat &lt;em&gt;m&lt;/em&gt;, and B(&lt;em&gt;m&lt;/em&gt;, &lt;em&gt;n&lt;/em&gt;) is the number of the bus that mechanic &lt;em&gt;m&lt;/em&gt; worked on after working on &lt;em&gt;n&lt;/em&gt; previous buses. So B(3, 2) will be 2, B(0, 2) will be 42, and B(2, 4) will be 11.&lt;/p&gt;

&lt;p&gt;We will call to the stand a Mechanic who has not been seated. We can find such a mechanic according to the following rules:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The mechanic must not have worked on Bus 0 first&lt;/li&gt;
  &lt;li&gt;The mechanic must not have worked on Bus 1 second&lt;/li&gt;
  &lt;li&gt;The mechanic must not have worked on Bus 3 third&lt;/li&gt;
  &lt;li&gt;The mechanic must not have worked on Bus 42 last&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s say that Z(&lt;em&gt;n&lt;/em&gt;) is the bus that our witness worked on after &lt;em&gt;n&lt;/em&gt; previous buses. Our rule is that Z(&lt;em&gt;n&lt;/em&gt;) shall not be equal to B(&lt;em&gt;n&lt;/em&gt;, &lt;em&gt;n&lt;/em&gt;). There are, after all, and infinite number of buses that fit the bill. Essentially, we move &lt;em&gt;diagonally&lt;/em&gt; along our mechanics, selecting a bus that doesn’t match. So one such witness might be:&lt;/p&gt;

&lt;p&gt;Z: Bus 1, Bus 2, Bus 4, Bus 3, …, Bus 99&lt;/p&gt;

&lt;p&gt;Where is our witness seated in the auditorium? Not in the first position, nor the second, nor the third, and so on, because in each position we have an infinite number of buses to choose from, and we can always find a bus that doesn’t match that position or any of the buses previously selected for this witness.&lt;/p&gt;

&lt;p&gt;In fact, there are an &lt;em&gt;infinite number of such witnesses!&lt;/em&gt; And furthermore, we assert that the number of mechanics not seated is much, much larger than the number of people in Dr. David’s so-called infinite auditorium.&lt;/p&gt;

&lt;h3 id=&quot;the-prosecution-rests&quot;&gt;the prosecution rests&lt;/h3&gt;

&lt;p&gt;Georgina Orr’s fist crashed on the table. “We will demonstrate all this and much more, proving the Dr. David is a fraud and that he discriminates freely. If he knows what’s good for him, he will recognize that his policies have &lt;em&gt;real consequences&lt;/em&gt; and will sign a consent order promising to refrain from describing his school as having infinite capacity and furthermore will find an equitable method of giving his limited seats to prospective students.”&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Hilbert's Grand JavaScript School</title>
          <link>http://raganwald.com/2013/02/21/hilberts-school.html</link>
          <pubDate>Thu, 21 Feb 2013 00:00:00 -0500</pubDate>
          <author>reg@braythwayt.com (Reginald Braithwaite)</author>
          <guid>http://raganwald.com/2013/02/21/hilberts-school</guid>
          <description>&lt;p&gt;Dr. Hilbert “Bertie” David grows tired of blogging about JavaScript, and decides to cash in on the seemingly inexhaustible supply of impressionable young minds seeking to “Learn JavaScript in Five Days.”&lt;/p&gt;

&lt;p&gt;He opens his &lt;em&gt;Grand JavaScript School&lt;/em&gt; on the shores of the Andaman Sea in Thailand, and with some clever engineering, he is able to install a countably infinite&lt;sup id=&quot;fnref:count&quot;&gt;&lt;a href=&quot;#fn:count&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; number of seats in his lecture hall.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/quinet/6105449498/&quot; title=&quot;Island panorama 3 by quinet, on Flickr&quot;&gt;&lt;img src=&quot;http://farm7.staticflickr.com/6079/6105449498_2bb67e2fd2_z.jpg&quot; width=&quot;640&quot; height=&quot;289&quot; alt=&quot;Island panorama 3&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;day-one&quot;&gt;day one&lt;/h3&gt;

&lt;p&gt;Well, an infinite number of students show up on the first day. “Line up please!” he calls out to them with a bullhorn of his own invention. “Line up! Good. Each of you has a number. The first person in line is zero, the next person is one, and so on. The machine will call out a number. When you hear your number, step forward, pay your fee in bitcoins, take your receipt, then you may enter the lecture hall and find the seat with your number on it. Thank you, the lecture will begin when everyone has been seated.”&lt;/p&gt;

&lt;p&gt;Bertie quickly whips out a JavaScript IDE he has devised, and he writes himself a functional iterator. Instead of iterating over a data structure in memory, it generates seat numbers on demand:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;seats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 0, 1, 2, 3, ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;He simply calls out the numbers as they are printed, and the students file into the auditorium in an orderly fashion, filling it completely. Well, the first day is very long indeed. But Bertie has an infinite supply of bitcoins and things go well.&lt;/p&gt;

&lt;p&gt;Avoiding the well-travelled road of explaining “this,” “closures,” or “monads,” he decides to explain functional iterators using the Tortoise and Hare algorithm&lt;sup id=&quot;fnref:tortoise&quot;&gt;&lt;a href=&quot;#fn:tortoise&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; as an example. People are scratching their heads, but on the second day, all of the students from the first day return. So it must have been a decent lecture.&lt;/p&gt;

&lt;h3 id=&quot;day-two&quot;&gt;day two&lt;/h3&gt;

&lt;p&gt;In fact, a few people liked the lecture so much that they recommended it to their friends, and one million additional students are lined up for seats in his class on the morning of the second day. He has an infinite number of seats in the auditorium, but they are all full. What can he do?&lt;/p&gt;

&lt;p&gt;Out comes the IDE and the bullhorn. This time, he uses the &lt;a href=&quot;http://allong.es&quot; title=&quot;Free recipes from JavaScript Allongé&quot;&gt;allong.es&lt;/a&gt; library and writes the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;allong.es&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldSeats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;newSeats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MoveToSeat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; -&amp;gt; &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MoveToSeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oldSeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newSeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 0 -&amp;gt; 1000000&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//-&amp;gt; 1 -&amp;gt; 1000001&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//-&amp;gt; 2 -&amp;gt; 1000002&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 3 -&amp;gt; 1000003&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;He has constructed an iterator with instructions for moving seats. Bertie tells the first person to move from seat zero to seat one million, the second from one to one million and one, and so forth. This means that seats 0 through 999,999 become vacant, so the 1,000,000 new students have a place to sit. Day Two goes well, and he is very pleased with his venture.&lt;/p&gt;

&lt;h3 id=&quot;day-three&quot;&gt;day three&lt;/h3&gt;

&lt;p&gt;His fame spreads, and Jeff Atwood starts a discussion about Bertie’s JavaScript school on his new &lt;a href=&quot;http://www.discourse.org&quot;&gt;Discourse&lt;/a&gt; discussion platform. There’s so much interest, Jeff charters a bus with an infinite number of seats and brings his infinite number of fans to Bertie’s school for Day Three. The bus’s seats have numbers from zero just like the auditorium.&lt;/p&gt;

&lt;p&gt;All of the students from Day Two have returned, so the auditorium is already full. Bertie is perplexed, but after scratching his head for a few moments, whips out his bullhorn and write the following JavaScript:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EvenNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MoveToSeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EvenNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 0 -&amp;gt; 0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//-&amp;gt; 1 -&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//-&amp;gt; 2 -&amp;gt; 4&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 3 -&amp;gt; 6&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now all the existing students are in the even numbered seats, so he’s ready to seat Jeff’s fans:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OddNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MoveToSeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OddNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 0 -&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//-&amp;gt; 1 -&amp;gt; 3&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//-&amp;gt; 2 -&amp;gt; 5&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 3 -&amp;gt; 7&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bertie calls out the seat numbers on Jeff’s bus and the number of an odd-numbered (and therefore vacant) seat in the auditorium for them to occupy. Bertie has managed to add an infinite number of students to an infinitely large but full auditorium.&lt;/p&gt;

&lt;p&gt;He’s so pleased, Bertie lets Jeff be the guest lecturer. The audience has loved Bertie’s abstract approach to programming so far, but they’re hungry for practical knowledge and Jeff enthrals them  with a walkthrough of how the Discourse User Experience is implemented.&lt;/p&gt;

&lt;p&gt;As a bonus, Jeff shares his insights into programming productivity.&lt;sup id=&quot;fnref:jeff&quot;&gt;&lt;a href=&quot;#fn:jeff&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; By the end of the day, everyone is typing over 100wpm and has placed an order for multiple wall-sized monitors on eBay.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/raver_mikey/4118859026/&quot; title=&quot;Nice selection of REAL buses! by Gene Hunt, on Flickr&quot;&gt;&lt;img src=&quot;http://farm3.staticflickr.com/2516/4118859026_ee4f8ce254_z.jpg&quot; width=&quot;640&quot; height=&quot;480&quot; alt=&quot;Nice selection of REAL buses!&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;day-four&quot;&gt;day four&lt;/h3&gt;

&lt;p&gt;Day Three went well, so all the students return and the auditorium remains full. Everyone is very pleased and looking forward to Day Four.&lt;/p&gt;

&lt;p&gt;But the excitement has a downside: Reddit hears about what’s going on and an infinite number of subreddits, each of which has an infinite number of redditors, all decide to show up on day four to disrupt his lecture with trolling about how lame JavaScript is as a programming language. Each sends an infinitely large bus, with every seat full. Like Jeff’s bus, each bus numbers its seat from zero and as luck would have it, each bus has has a number and the buses are numbered from zero.&lt;/p&gt;

&lt;p&gt;Bertie has to seat an infinite number of infinite groups of people, in an infinite auditorium that is already full! Now what? Out comes the bullhorn and yesterday’s program, and he quickly moves all of his existing students into the even-numbered seats, leaving an infinite number of odd seats available for newcomers.&lt;/p&gt;

&lt;p&gt;He writes a new program:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Diagonals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;seat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seat&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;He has an Espresso Allongé and contemplates his work so far. &lt;code&gt;Diagonals&lt;/code&gt; is an iterator over an infinite collection of iterators, each of which uniquely identifies a bus and seat on that bus. They look something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you think of the buses and seats forming a square, the diagonals iterator makes a path from one corner and works its way out, enumerating over every possible combination of bus and seat. Thus, given countably infinite time, it will list every one of the countably infinite number of Redditors on each of the countably infinite number of buses.&lt;/p&gt;

&lt;p&gt;To move forward, Bertie needs a &lt;code&gt;concatenate&lt;/code&gt; iterator for iterators:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;concatenate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iteratorOfIterators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thisIterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iteratorOfIterators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myself&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thisIterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thisIterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;thisIterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iteratorOfIterators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PeopleOnTheBuses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;concatenate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Dialognals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PeopleOnTheBuses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; { bus: 0, seat: 0 }&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; { bus: 0, seat: 1 }&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; { bus: 1, seat: 0 }&lt;/span&gt;
  
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bertie is satisfied, but the natives are restless, so he keeps coding, then reaches for his bullhorn:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RedditorSeats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PeopleOnTheBuses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bus: &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;, seat: &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;seat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MoveToSeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RedditorSeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OddNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;#39;bus: 0, seat: 0 -&amp;gt; 1&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;#39;bus: 0, seat: 1 -&amp;gt; 3&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;#39;bus: 1, seat: 0 -&amp;gt; 5&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;#39;bus: 0, seat: 2 -&amp;gt; 7&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;#39;bus: 1, seat: 1 -&amp;gt; 9&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;#39;bus: 2, seat: 0 -&amp;gt; 11&amp;#39;&lt;/span&gt;
  
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Well, this seats an infinite number of Redditors on an infinite number of buses in an infinite auditorium that was already full. He does a code walkthrough with the students, then segues on to talk about other interesting aspects of Georg Cantor&lt;sup id=&quot;fnref:cantor&quot;&gt;&lt;a href=&quot;#fn:cantor&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;’s work and a digression into Hotel Management.&lt;sup id=&quot;fnref:grand&quot;&gt;&lt;a href=&quot;#fn:grand&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; By the time he finishes with a discussion of the Hypergame&lt;sup id=&quot;fnref:kongregate&quot;&gt;&lt;a href=&quot;#fn:kongregate&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; proof of the infinite number of infinities, everyone has forgotten that they came to scoff.&lt;/p&gt;

&lt;p&gt;He finishes with a summary of what he learned seating students:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You can put a countably infinite number of seats into a one-to-one correspondence with the numbers, therefore they have the same &lt;em&gt;cardinality&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;You can add a finite number to an countably infinite number and put your new number into a one-to-one correspondence with the numbers, therefore infinity plus a finite number has the same cardinality as the numbers.&lt;/li&gt;
  &lt;li&gt;You can add infinity to infinity and put your new number into a one-to-one correspondence with the numbers, therefore infinity plus infinity has the same cardinality as the numbers. By induction, you can add a finite number of infinities together and have the same cardinality as the numbers.&lt;/li&gt;
  &lt;li&gt;You can add an infinite number of infinities to infinity and put your new number into a one-to-one correspondence with the numbers, therefore an infinity times infinity has the same cardinality as the numbers.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;day-five&quot;&gt;day five&lt;/h3&gt;

&lt;p&gt;On Day Five, everyone is back and he announces that there will be a test: &lt;em&gt;“Outside our doors,”&lt;/em&gt; he announces, &lt;em&gt;“Are an infinite number of aircraft carriers, each of which has an infinitely large flight deck. Parked on each flight deck are an infinite number of buses, each of which contains–you guessed it–an infinite number of sailors and air crew eager to join our school for the next semester.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Write a JavaScript program to seat them all in our lecture hall. If your program works, you may come up to the front and receive your signed diploma. If you can prove that no program works, you will also receive your diploma. Good luck!”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In other words, Bertie wants his students to use JavaScript to figure out whether infinity cubed is countable. Is it?&lt;/p&gt;

&lt;h3 id=&quot;post-scriptum&quot;&gt;post scriptum&lt;/h3&gt;

&lt;p&gt;While the students busy themselves writing the test, he sends a pull request to integrate his &lt;code&gt;concatenate&lt;/code&gt; function into &lt;a href=&quot;http://allong.es&quot; title=&quot;Free recipes from JavaScript Allongé&quot;&gt;allong.es&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;post-post-scriptum&quot;&gt;post-post scriptum&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://raganwald.com/2013/02/22/breaking-news-programming-school-closed.html&quot;&gt;Dr. Hilbert’s School Has Been Closed For Admissions Irregularities&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;end-notes&quot;&gt;end notes&lt;/h3&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:count&quot;&gt;
      &lt;p&gt;Meaning, he is able to put the seats in a one-to-one correspondence with the natural numbers. He does this by numbering the seats from zero. See &lt;a href=&quot;https://en.wikipedia.org/wiki/Countable_set&quot;&gt;Countable Sets&lt;/a&gt;.&lt;a href=&quot;#fnref:count&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:tortoise&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://raganwald.com/2013/02/15/turtles-and-iterators.js.html&quot;&gt;http://raganwald.com/2013/02/15/turtles-and-iterators.js.html&lt;/a&gt;&lt;a href=&quot;#fnref:tortoise&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:jeff&quot;&gt;
      &lt;p&gt;“As far as I’m concerned, you can never be too rich, too thin, or have too much screen space.”–&lt;a href=&quot;http://www.codinghorror.com/blog/2010/04/three-monitors-for-every-user.html&quot;&gt;Three Monitors For Every User&lt;/a&gt;&lt;a href=&quot;#fnref:jeff&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:cantor&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Georg_Cantor&quot;&gt;https://en.wikipedia.org/wiki/Georg_Cantor&lt;/a&gt;&lt;a href=&quot;#fnref:cantor&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:grand&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Hilbert's_paradox_of_the_Grand_Hotel&quot;&gt;https://en.wikipedia.org/wiki/Hilbert’s_paradox_of_the_Grand_Hotel&lt;/a&gt;&lt;a href=&quot;#fnref:grand&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:kongregate&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.kongregate.com/forums/9/topics/93615&quot;&gt;http://www.kongregate.com/forums/9/topics/93615&lt;/a&gt;&lt;a href=&quot;#fnref:kongregate&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Twenty Thirteen</title>
          <link>http://raganwald.com/2013/02/20/twenty-thirteen.html</link>
          <pubDate>Wed, 20 Feb 2013 00:00:00 -0500</pubDate>
          <author>reg@braythwayt.com (Reginald Braithwaite)</author>
          <guid>http://raganwald.com/2013/02/20/twenty-thirteen</guid>
          <description>&lt;h2 id=&quot;why-ive-moved-back-to-proper-blogging-and-how-im-using-github-pages-to-do-it&quot;&gt;Why I’ve moved back to proper blogging, and how I’m using Github Pages to do it&lt;/h2&gt;

&lt;p&gt;A little more than four years ago, I tried an experiment: On October 27, 2008 I pushed &lt;a href=&quot;https://Github.com/raganwald/homoiconic/blob/master/2008-10-27/unfold.markdown&quot;&gt;some text in markdown format&lt;/a&gt; to Github, and a new kind of bloggy thing called &lt;a href=&quot;https://Github.com/raganwald/homoiconic&quot;&gt;Homoiconic&lt;/a&gt; was born.&lt;/p&gt;

&lt;p&gt;As a blog, it was lame. Markdown is seriously limited as a word processor. Github prevented me from doing anything interesting with layouts. A repo has terrible indexing of old posts. No comments or JavaScript to embed anything useful. I didn’t own my own domain, a serious flaw.&lt;/p&gt;

&lt;p&gt;However.&lt;/p&gt;

&lt;h3 id=&quot;distraction-free&quot;&gt;distraction-free&lt;/h3&gt;

&lt;p&gt;You know how people have embraced this idea of “distraction-free writing?” Github gave me that, in Spades, doubled and redoubled with an overtrick. Markdown is inherently distraction-free, there’s only so much you can do with it, and if you want more you just have to say no to yourself and keep writing.&lt;/p&gt;

&lt;p&gt;The workflow was a little geeky, but no worse than using SFTP or some weird proprietary blog engine web application. And it’s kind of my job to use git, so I can’t really complain about that.&lt;/p&gt;

&lt;p&gt;And my world was changing. Fewer and fewer of my readers were “subscribing” to my blog via RSS. I was getting my “hits” through Reddit and Hacker News and other people’s tweets and so on. It seemed like a win to me, so I gave it a try, especially for anything code-u-macated.&lt;/p&gt;

&lt;h3 id=&quot;posterous&quot;&gt;posterous&lt;/h3&gt;

&lt;p&gt;A while later, Posterous launched. The best thing about Posterous was the workflow: Send an email. The worst thing about Posterous was that once you sent that email, you could format your posts with HTML and fancy styles. I tried it, loved the post-by-email, hated the fact that I would often fiddle with formatting.&lt;/p&gt;

&lt;p&gt;One of the nice things about markdown is that it is what it is. There’s very little need to fiddle with anything except the actual words and ideas. Time passed, and Posterous got bought by Twitter, and now they’re shutting down. Boo hoo.&lt;/p&gt;

&lt;h3 id=&quot;and-now&quot;&gt;and now…&lt;/h3&gt;

&lt;p&gt;In the last twelve months or so, I’ve been embracing &lt;a href=&quot;http://pages.github.com&quot;&gt;Github Pages&lt;/a&gt; for some projects. In exchange for fiddling with a domain registrar, I can host things on my own domains, like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://allong.es&quot;&gt;http://allong.es&lt;/a&gt;: A free library of &lt;a href=&quot;https://leanpub.com/javascript-allonge&quot;&gt;JavaScript Allongé&lt;/a&gt; recipes.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://recursiveuniver.se&quot;&gt;http://recursiveuniver.se&lt;/a&gt;: An implementation of HashLife, in Literate CoffeeScript.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://oscin.es&quot;&gt;http://oscin.es&lt;/a&gt;: Combinatory Logic in JavaScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m even hosting free versions of some of my books:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://combinators.info&quot;&gt;http://combinators.info&lt;/a&gt;: &lt;a href=&quot;https://leanpub.com/combinators&quot;&gt;Kestrels, Quirky Birds, and Hopeless Egocentricity&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ristrettolo.gy&quot;&gt;http://ristrettolo.gy&lt;/a&gt;: &lt;a href=&quot;https://leanpub.com/coffeescript-ristretto&quot;&gt;CoffeeScript Ristretto&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And with those under my belt, I took the plunge and moved all of my writing from 2013 over to &lt;a href=&quot;http://raganwald.com&quot;&gt;http://raganwald.com&lt;/a&gt;. I’m now using Jekyll to publish my “bloggy thing” to Github. I get the same lame lack of ability to format my posts, but I can now waste time with layouts.&lt;/p&gt;

&lt;p&gt;And I get my own domain, that’s a win. And the layouts let me do things like pimp my books on every page without doing a global search-and-replace. Or add analytics to the blog. We’ll see if I do much more than just post.&lt;/p&gt;

&lt;h3 id=&quot;my-workflow&quot;&gt;my workflow&lt;/h3&gt;

&lt;p&gt;I do a more complicated thing with Jekyll on my &lt;a href=&quot;http://ristrettolo.gy&quot;&gt;http://ristrettolo.gy&lt;/a&gt; site, where I use an asset pipeline to compile CoffeeScript. It’s a book about CoffeeScript, the interactive behaviour should be written in CoffeeScript!&lt;/p&gt;

&lt;p&gt;But here on &lt;a href=&quot;http://raganwald.com&quot;&gt;http://raganwald.com&lt;/a&gt;, I use the basic (and free) Jekyll behaviour built into Github Pages. That means absolutely no Jekyll plugins. Which suits me fine.&lt;/p&gt;

&lt;p&gt;New posts go into a &lt;code&gt;_posts&lt;/code&gt; folder, with a special name. This one is &lt;code&gt;2013-02-20-twenty-thirteen.md&lt;/code&gt;. The top of each post has some YAML junk:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Twenty Thirteen&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If both of those things are set up correctly, the post is automatically published when I push to Github. It’s poured into the “tactile” layout, and the resulting HTML is available at  &lt;a href=&quot;http://raganwald.com/2013/02/20/twenty-thirteen.html&quot;&gt;http://raganwald.com/2013/02/20/twenty-thirteen.html&lt;/a&gt;. I can preview my work by running &lt;code&gt;jekyll&lt;/code&gt; on the command line, &lt;code&gt;jekyll --auto&lt;/code&gt; if I want it to rebuild the site locally whenever it detects changes, or &lt;code&gt;jekyll --server 3333&lt;/code&gt; if I want to run a preview web server on port 3333.&lt;/p&gt;

&lt;p&gt;But building locally is optional. The site is rebuilt by Github when I push and that’s what’s published to the web.&lt;/p&gt;

&lt;h3 id=&quot;benefits&quot;&gt;benefits&lt;/h3&gt;

&lt;p&gt;Like the old thing, I get the ability to ask for pull requests. That’s huge, I get a lot of good corrections that way.&lt;/p&gt;

&lt;p&gt;I guess I could embed Disqus comments if I wanted to, but I enjoy outsourcing discussion to Hacker News, Reddit, or wherever. Let &lt;em&gt;them&lt;/em&gt; play whack-a-mole with incivility.&lt;/p&gt;

&lt;p&gt;I am not one of these super-bloggers with his own community. There are people who like my writing, and that’s great, but it’s a win for everyone if the comments praising my writing are alongside those pointing out where it could be, um, “even better.” I think there’s more of that when people discuss things elsewhere.&lt;/p&gt;

&lt;p&gt;I get one-click publishing, I just have to click in a Github client rather than on some web abomination.&lt;/p&gt;

&lt;p&gt;I get a complete edit history. It’s git!&lt;/p&gt;

&lt;p&gt;Overall, I think this is going to go well.&lt;/p&gt;

&lt;h3 id=&quot;my-setup&quot;&gt;my setup&lt;/h3&gt;

&lt;p&gt;Following Github’s instructions, I registered my domain and configured the DNS to resolve to Github’s servers at &lt;code&gt;204.232.175.78&lt;/code&gt;. That takes anywhere from a few hours to a few days before a new domain starts 404-ing at Github, showing that the DNS is set up properly.&lt;/p&gt;

&lt;p&gt;For each top-level domain, you have two choices. First, and most complicated, you need a fresh Github account with a special repo. For example, you can set up &lt;code&gt;whizzbang2000&lt;/code&gt; as a Github free account and then create a repo &lt;code&gt;whizzbang200.github.com&lt;/code&gt;. I then give my &lt;code&gt;raganwald&lt;/code&gt; account collaboration privileges and we’re off to the races. For &lt;a href=&quot;http://raganwald.com&quot;&gt;http://raganwald.com&lt;/a&gt;, I’m already the guy, so there’s no need to set up a separate account.&lt;/p&gt;

&lt;p&gt;Second, you can set up an ordinary repo under your own account, but your site must be in the &lt;code&gt;gh-pages&lt;/code&gt; branch. That’s what most people do if they have more than one site to manage.&lt;/p&gt;

&lt;p&gt;I drop a &lt;code&gt;CNAME&lt;/code&gt; file into the repo. For &lt;a href=&quot;http://raganwald.com&quot;&gt;http://raganwald.com&lt;/a&gt;, the file contains the text &lt;code&gt;raganwald.com&lt;/code&gt;. Once you push that, Github starts resolving hits to &lt;code&gt;raganwald.com&lt;/code&gt; to whatever you are publishing. You could drop an index.html file in there, or an index.md with some YAML to tell Github how to build it, or go wild with Liquid Tags, it’s up to you.&lt;/p&gt;

&lt;p&gt;A nice thing about Jekyll is that you can control the Markdown rendering with the &lt;code&gt;_config.yaml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;pygments&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;lsi&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;safe&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;kramdown&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;config.rb, README.md&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, I’ve turned pygments on to do source highlighting. I also use Kramdown because that’s what Leanpub uses when it renders my books, so I want the maximum possible compatibility between the two. And I like being able to use footnotes.&lt;sup id=&quot;fnref:pg&quot;&gt;&lt;a href=&quot;#fn:pg&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;And that, as they say, is that. This is where I’m going to be doing my “raganwald” tech blogging for the next little while. I’ll guess four years, since that’s about how long it is before the world changes enough to warrant throwing it all out and starting over.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“You know why I don’t play ballads any more? Because I love to play ballads”–Miles Davis&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(&lt;a href=&quot;http://news.ycombinator.com/item?id=5253592&quot;&gt;discuss&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;post-scriptum&quot;&gt;post scriptum&lt;/h3&gt;

&lt;p&gt;Here is some Jekyll Templating embedded in a markdown file, just to show that if you want to do some yak-shaving, you can. This is a list of posts, dynamically generated:&lt;/p&gt;

&lt;div class=&quot;related&quot;&gt;
  &lt;ul&gt;
    
    &lt;li&gt;
&lt;span&gt;&lt;/span&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
&lt;span&gt;&lt;/span&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
&lt;span&gt;&lt;/span&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
&lt;span&gt;&lt;/span&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
&lt;span&gt;&lt;/span&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
&lt;span&gt;&lt;/span&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
&lt;span&gt;&lt;/span&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
&lt;span&gt;&lt;/span&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
&lt;span&gt;&lt;/span&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
&lt;span&gt;&lt;/span&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
&lt;span&gt;&lt;/span&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
&lt;span&gt;&lt;/span&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
&lt;span&gt;&lt;/span&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
&lt;span&gt;&lt;/span&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
&lt;span&gt;&lt;/span&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
    &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/div&gt;

&lt;h3 id=&quot;end-note&quot;&gt;end note&lt;/h3&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:pg&quot;&gt;
      &lt;p&gt;Paul Graham has suggested that I can cut down my wordiness by moving a lot of non-core observations into footnotes. He may have something there.&lt;a href=&quot;#fnref:pg&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    

  </channel> 
</rss>
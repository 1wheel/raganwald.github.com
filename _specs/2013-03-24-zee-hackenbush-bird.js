// Generated by CoffeeScript 1.6.1
(function() {
  var HackenstringGame, black, every, isArray, white, _ref;

  _ref = require('underscore'), isArray = _ref.isArray, every = _ref.every;

  white = {};

  black = {};

  HackenstringGame = (function() {
    var validRow;

    validRow = function(row) {
      return isArray(row) && every(row, function(stone) {
        return stone === white || stone === black;
      });
    };

    function HackenstringGame(rows) {
      this.rows = rows;
      if (!every(this.rows, validRow)) {
        throw 'invalid';
      }
    }

    return HackenstringGame;

  })();

  describe("HackenstringGame", function() {
    it("shouldn't throw an error for no rows or empty rows", function() {
      expect(function() {
        return new HackenstringGame([]);
      }).not.toThrow();
      expect(function() {
        return new HackenstringGame([[]]);
      }).not.toThrow();
      return expect(function() {
        return new HackenstringGame([[], []]);
      }).not.toThrow();
    });
    return it("shouldn't throw an error for rows with stnes", function() {
      expect(function() {
        return new HackenstringGame([[white]]);
      }).not.toThrow();
      expect(function() {
        return new HackenstringGame([[white, white]]);
      }).not.toThrow();
      expect(function() {
        return new HackenstringGame([[black]]);
      }).not.toThrow();
      return expect(function() {
        return new HackenstringGame([[white, black]]);
      }).not.toThrow();
    });
  });

}).call(this);
